module MainModule;

import System;
using System;

class TestClass
{
    var t = 3.14;
}

var a = 5;
PrintLine(a);

a = 5.42;
PrintLine(a);

a = "The answser: 42";
PrintLine(a);

a = new TestClass();
PrintLine(a.t);

a = true;
PrintLine(a);

/*
// Fibonacci function returned as return value example
module MainModule;

import System;
using System;

function FindFibonacciNumber(n)
{
    var count= 2;
    var a = 1;
    var b = 1;
    var c = 1;
    if(n == 0)
    {
        return 0;
    }
    while(count<n)
    {
        c = a + b;
        a = b;
        b = c; 
        count++;
    }

    return c;
}

function FuncGiver()
{
    return FindFibonacciNumber;
}

var a = FuncGiver();

for(var i = 0; i < 50; i++)
{
    PrintLine(a(i));
}
*/


/*
// Fibonacci function as argument example
module MainModule;

import System;
using System;


function FindFibonacciNumber(n)
{
    var count= 2;
    var a = 1;
    var b = 1;
    var c = 1;
    if(n == 0)
    {
        return 0;
    }
    while(count<n)
    {
        c = a + b;
        a = b;
        b = c; 
        count++;
    }

    return c;
}

function FuncCall(n)
{
    for(var i = 0; i < 50; i++)
    {
        PrintLine(n(i));
    }
}


FuncCall(FindFibonacciNumber);*/

/*

// Fibonacci Example

function FindFibonacciNumber(n)
{
    var count= 2;
    var a = 1;
    var b = 1;
    var c = 1;
    if(n == 0)
    {
        return 0;
    }
    while(count<n)
    {
        c = a + b;
        a = b;
        b = c; 
        count++;
    }

    return c;
}

for(var i = 0; i < 50; i++)
{
    PrintLine(FindFibonacciNumber(i));
}
*/
/*
// C# Foreign Library Type Import System Example
var testClassInterface = new CSharpInterface();
testClassInterface.Type = "TestApp.TestClassCSharp, TestApp";

testClassInterface.ConstructorArguments[0] = 42;
testClassInterface.ConstructorArgumentsTypes[0] = "System.Int32";


var TestCSharp = CSharpInterfaceCall(testClassInterface);

TestCSharp.PrintVar();
PrintLine(TestCSharp.testfield.i);
TestCSharp.testfield.i = 58;
PrintLine(TestCSharp.testfield.i);

*/


/*
// Value Type Class Wraper Example
class TestClass
{
    var x = 5;
}

function TestFunction(n)
{
    n.x = 10;
}



var a = new TestClass();

PrintLine(a.x);

TestFunction(a);

PrintLine(a.x);

*/

/*
// Constructor Test
class Foo
{
    var x = 5;
}

class TestClass : Foo
{
    function TestClass(n)
    {
        x = n;
    }
}

var t = new TestClass(500);
PrintLine(t.x);

var a = new TestClass(150);

PrintLine(a.x);

TestFunction(a);

PrintLine(a.x);

*/
/*
// Dispatch

function A()
{
    PrintLine("Hello World! 1");
}

function B(n)
{
    PrintLine("Hello World! " + n);
}

function C()
{
    PrintLine("Hello World! 3");
}


var functionObj = new Object();

functionObj["a"] = A;
functionObj["b"] = B;
functionObj["c"] = C;

functionObj["a"]();
functionObj["b"](5);
functionObj["c"]();

*/

/*
// Inheritance Example
class Foo
{
    var x = 2;
    var y = 4;
    var z = 8;

    function FooFunc()
    {
        return x * y * z;
    }
}

class Bar : Foo
{
}

var a = new Bar();
PrintLine(a.x);
PrintLine(a.y);
PrintLine(a.z);
PrintLine(a.FooFunc());
*/


/*
// Fibonacci Example

function FindFibonacciNumber(n)
{
    var count= 2;
    var a = 1;
    var b = 1;
    var c = 1;
    if(n == 0)
    {
        return 0;
    }
    while(count<n)
    {
        c = a + b;
        a = b;
        b = c; 
        count++;
    }

    return c;
}

var temp = 0;
var count3 = 0;
while(count3 < 1000)
{
    var count2 = 0;
    while(count2 < 37)
    {
        temp = FindFibonacciNumber(count2);
        count2++;
    }
    count3++;
}

PrintLine(temp);

*/


/*

// Prime Number Example
function FindPrimeNumber(n)
{
    var count=0;
    var a = 2;
    while(count<n)
    {
        var b = 2;
        var prime = 1;
        while(b * b <= a )
        {
            if(a % b == 0)
            {
                prime = 0;
                break;
            }
            b++;
        }
        if(prime > 0)
        {
            count++;
        }
        a++;
    }
    return (--a);
}

PrintLine(FindPrimeNumber(2));
PrintLine(FindPrimeNumber(4));
PrintLine(FindPrimeNumber(8));
PrintLine(FindPrimeNumber(16));
PrintLine(FindPrimeNumber(32));
PrintLine(FindPrimeNumber(64));

*/

/*
// Fibonacci in Class Example

class Fibo
{
    function FindFibonacciNumber(n)
    {
        var count= 2;
        var a = 1;
        var b = 1;
        var c = 1;
        if(n == 0)
        {
            return 0;
        }
        while(count<n)
        {
            c = a + b;
            a = b;
            b = c; 
            count++;
        }
    
        return c;
    }
}

var fibo = new Fibo();
var temp = 0;
var count3 = 0;
while(count3 < 1000)
{
    var count2 = 0;
    while(count2 < 37)
    {
        temp = fibo.FindFibonacciNumber(count2);
        count2++;
    }
    count3++;
}

            
Console.WriteLine(temp);
*/


/*
// Dynamic Array Example
var c = new Object();
var f = 0;
for(var x = 0; x < 10; x++)
{
    for(var y = 0; y < 10; y++)
    {
        for(var z = 0; z < 10; z++)
        {
           c[x][y][z] = "Number: " + f;
           f++;
        }
    }
}

for(var x = 0; x < 10; x++)
{
    for(var y = 0; y < 10; y++)
    {
        for(var z = 0; z < 10; z++)
        {
           PrintLine(c[x][y][z]);
        }
    }
}


*/




/*
// Binary Operation Chaining Test
var a = 1 * 2 + 3 * 4;
var b = 2 * 5 - 4 / 2 + 6;
var c = 2 * 5 - (4 / 2 + 6);
var d = 2 * 5 - 4 / (2 + 6);

Console.WriteLine(a);
Console.WriteLine(b);
Console.WriteLine(c);
Console.WriteLine(d);

*/


/*
// Branching Test

var a = "foo";

var b = "bar";

var c = 0;

if( a == "test")
{
    c = 2;
}
else if( b == "bar1")
{
   c = 4;
}
else if( b == "bar2")
{
   c = 8;
}
else if( b == "bar5")
{
   c = 16;
}
else if( b == "bar")
{
   c = 32;
}
else if( b == "bar4")
{
   c = 64;
}
else
{
    c = 42;
}
PrintLine(c);

*/
