module MainModule;

import System;
using System;

import CSharpSystem;
using CSharpSystem;

// Prime Number Example
function FindPrimeNumber(n)
{
    var count=0;
    var a = 2;
    while(count<n)
    {
        var b = 2;
        var prime = 1;
        while(b * b <= a )
        {
            if(a % b == 0)
            {
                prime = 0;
                break;
            }
            b++;
        }
        if(prime > 0)
        {
            count++;
        }
        a++;
    }
    return (--a);
}

Print(FindPrimeNumber(2));
Print(FindPrimeNumber(4));
Print(FindPrimeNumber(8));
Print(FindPrimeNumber(16));
Print(FindPrimeNumber(32));
Print(FindPrimeNumber(64));
/*
// C# Foreign Library Type Import System Example
var testClassInterface = new CSharpInterface();
testClassInterface.Type = "TestApp.TestClassCSharp, TestApp";

testClassInterface.ConstructorArguments[0] = 42;
testClassInterface.ConstructorArgumentsTypes[0] = "System.Int32";


var TestCSharp = CSharpInterfaceCall(testClassInterface);

TestCSharp.PrintVar();
Print(TestCSharp.testfield.i);
TestCSharp.testfield.i = 42;
Print(TestCSharp.testfield.i);

*/


/*
// Value Type Class Wraper Example
class TestClass
{
    var x = 5;
}

function TestFunction(n)
{
    n.x = 10;
}



var a = new TestClass();

Print(a.x);

TestFunction(a);

Print(a.x);

*/

/*
// Constructor Test
class TestClass
{
    var x = 5;
    function TestClass(n)
    {
        x = n;
    }
}

function TestFunction(n)
{
    n.x = 10;
}



var a = new TestClass(150);

Print(a.x);

TestFunction(a);

Print(a.x);*/

/*
// Inheritance Example
class Foo
{
    var x = 2;
    var y = 4;
    var z = 8;

    function FooFunc()
    {
        return x * y * z;
    }
}

class Bar : Foo
{
}

var a = new Bar();
Print(a.x);
Print(a.y);
Print(a.z);
Print(a.FooFunc());
*/


/*
// Fibonacci Example

function FindFibonacciNumber(n)
{
    var count= 2;
    var a = 1;
    var b = 1;
    var c = 1;
    if(n == 0)
    {
        return 0;
    }
    while(count<n)
    {
        c = a + b;
        a = b;
        b = c; 
        count++;
    }

    return c;
}

var temp = 0;
var count3 = 0;
while(count3 < 1000)
{
    var count2 = 0;
    while(count2 < 37)
    {
        temp = FindFibonacciNumber(count2);
        count2++;
    }
    count3++;
}

Print(temp);

*/


/*

// Prime Number Example
function FindPrimeNumber(n)
{
    var count=0;
    var a = 2;
    while(count<n)
    {
        var b = 2;
        var prime = 1;
        while(b * b <= a )
        {
            if(a % b == 0)
            {
                prime = 0;
                break;
            }
            b++;
        }
        if(prime > 0)
        {
            count++;
        }
        a++;
    }
    return (--a);
}

Print(FindPrimeNumber(2));
Print(FindPrimeNumber(4));
Print(FindPrimeNumber(8));
Print(FindPrimeNumber(16));
Print(FindPrimeNumber(32));
Print(FindPrimeNumber(64));

*/

/*
// Fibonacci in Class Example

class Fibo
{
    function FindFibonacciNumber(n)
    {
        var count= 2;
        var a = 1;
        var b = 1;
        var c = 1;
        if(n == 0)
        {
            return 0;
        }
        while(count<n)
        {
            c = a + b;
            a = b;
            b = c; 
            count++;
        }
    
        return c;
    }
}

var fibo = new Fibo();
var temp = 0;
var count3 = 0;
while(count3 < 1000)
{
    var count2 = 0;
    while(count2 < 37)
    {
        temp = fibo.FindFibonacciNumber(count2);
        count2++;
    }
    count3++;
}

            
Console.WriteLine(temp);
*/


/*
// Dynamic Array Example
var c = new Object();
var f = 0;
for(var x = 0; x < 10; x++)
{
    for(var y = 0; y < 10; y++)
    {
        for(var z = 0; z < 10; z++)
        {
           c[x][y][z] = "Number: " + f;
           f++;
        }
    }
}

for(var x = 0; x < 10; x++)
{
    for(var y = 0; y < 10; y++)
    {
        for(var z = 0; z < 10; z++)
        {
           Print(c[x][y][z]);
        }
    }
}


*/




/*
// Binary Operation Chaining Test
var a = 1 * 2 + 3 * 4;
var b = 2 * 5 - 4 / 2 + 6;
var c = 2 * 5 - (4 / 2 + 6);
var d = 2 * 5 - 4 / (2 + 6);

Console.WriteLine(a);
Console.WriteLine(b);
Console.WriteLine(c);
Console.WriteLine(d);

*/


/*
// Branching Test

var a = "foo";

var b = "bar";

var c = 0;

if( a == "test")
{
    c = 2;
}
else if( b == "bar1")
{
   c = 4;
}
else if( b == "bar2")
{
   c = 8;
}
else if( b == "bar5")
{
   c = 16;
}
else if( b == "bar")
{
   c = 32;
}
else if( b == "bar4")
{
   c = 64;
}
else
{
    c = 42;
}
Print(c);

*/
