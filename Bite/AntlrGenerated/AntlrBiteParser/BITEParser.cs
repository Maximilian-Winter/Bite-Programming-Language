//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Language Dev 3/Bite Programming Language/Bite/Grammar\BITEParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrBiteParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class BITEParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DeclareModule=1, DeclareClass=2, DeclareStruct=3, DeclareClassInstance=4, 
		DeclareFunction=5, DeclareVariable=6, DeclareGetter=7, DeclareSetter=8, 
		DeclareForLoop=9, DeclareWhileLoop=10, DeclareStatic=11, DeclareAbstract=12, 
		DeclarePublic=13, DeclarePrivate=14, ControlFlowIf=15, ControlFlowElse=16, 
		FunctionReturn=17, Break=18, NullReference=19, ThisReference=20, UsingDirective=21, 
		ImportDirective=22, AssignOperator=23, PlusAssignOperator=24, MinusAssignOperator=25, 
		MultiplyAssignOperator=26, DivideAssignOperator=27, ModuloAssignOperator=28, 
		BitwiseAndAssignOperator=29, BitwiseOrAssignOperator=30, BitwiseXorAssignOperator=31, 
		BitwiseLeftShiftAssignOperator=32, BitwiseRightShiftAssignOperator=33, 
		LogicalOrOperator=34, LogicalAndOperator=35, UnequalOperator=36, EqualOperator=37, 
		GreaterOperator=38, ShiftRightOperator=39, GreaterEqualOperator=40, SmallerOperator=41, 
		ShiftLeftOperator=42, SmallerEqualOperator=43, MinusOperator=44, MinusMinusOperator=45, 
		PlusOperator=46, PlusPlusOperator=47, DivideOperator=48, MultiplyOperator=49, 
		LogicalNegationOperator=50, DotOperator=51, QuestionMarkOperator=52, ColonOperator=53, 
		ReferenceOperator=54, ModuloOperator=55, ComplimentOperator=56, BitwiseAndOperator=57, 
		BitwiseXorOperator=58, BitwiseOrOperator=59, OpeningRoundBracket=60, ClosingRoundBracket=61, 
		OpeningCurlyBracket=62, ClosingCurlyBracket=63, SquarebracketLeft=64, 
		SquarebracketRight=65, CommaSeperator=66, SemicolonSeperator=67, DollarOperator=68, 
		BooleanLiteral=69, False_=70, True_=71, IntegerLiteral=72, FloatingLiteral=73, 
		StringLiteral=74, UnterminatedStringLiteral=75, DecimalLiteral=76, Identifier=77, 
		COMMENT=78, WS=79, LINE_COMMENT=80, DQUOTE=81, DOLLAR_DQUOTE=82, LPAR=83, 
		RPAR=84, TEXT=85, LPAR_IN_String=86, ESCAPE_SEQUENCE=87;
	public const int
		RULE_program = 0, RULE_module = 1, RULE_moduleDeclaration = 2, RULE_importDirective = 3, 
		RULE_usingDirective = 4, RULE_declaration = 5, RULE_classDeclaration = 6, 
		RULE_structDeclaration = 7, RULE_functionDeclaration = 8, RULE_classInstanceDeclaration = 9, 
		RULE_variableDeclaration = 10, RULE_statements = 11, RULE_statement = 12, 
		RULE_exprStatement = 13, RULE_localVarDeclaration = 14, RULE_localVarInitializer = 15, 
		RULE_forInitializer = 16, RULE_forIterator = 17, RULE_forStatement = 18, 
		RULE_ifStatement = 19, RULE_returnStatement = 20, RULE_breakStatement = 21, 
		RULE_usingStatement = 22, RULE_whileStatement = 23, RULE_block = 24, RULE_expression = 25, 
		RULE_assignment = 26, RULE_lambdaExpression = 27, RULE_ternary = 28, RULE_logicOr = 29, 
		RULE_logicAnd = 30, RULE_bitwiseOr = 31, RULE_bitwiseXor = 32, RULE_bitwiseAnd = 33, 
		RULE_equality = 34, RULE_relational = 35, RULE_shift = 36, RULE_additive = 37, 
		RULE_multiplicative = 38, RULE_unary = 39, RULE_call = 40, RULE_primary = 41, 
		RULE_privateModifier = 42, RULE_publicModifier = 43, RULE_abstractModifier = 44, 
		RULE_staticModifier = 45, RULE_parameters = 46, RULE_arguments = 47, RULE_inheritance = 48, 
		RULE_callArguments = 49, RULE_elementAccess = 50, RULE_elementIdentifier = 51, 
		RULE_argumentExpression = 52, RULE_parametersIdentifier = 53, RULE_interpolatedString = 54, 
		RULE_interpolatedStringContent = 55;
	public static readonly string[] ruleNames = {
		"program", "module", "moduleDeclaration", "importDirective", "usingDirective", 
		"declaration", "classDeclaration", "structDeclaration", "functionDeclaration", 
		"classInstanceDeclaration", "variableDeclaration", "statements", "statement", 
		"exprStatement", "localVarDeclaration", "localVarInitializer", "forInitializer", 
		"forIterator", "forStatement", "ifStatement", "returnStatement", "breakStatement", 
		"usingStatement", "whileStatement", "block", "expression", "assignment", 
		"lambdaExpression", "ternary", "logicOr", "logicAnd", "bitwiseOr", "bitwiseXor", 
		"bitwiseAnd", "equality", "relational", "shift", "additive", "multiplicative", 
		"unary", "call", "primary", "privateModifier", "publicModifier", "abstractModifier", 
		"staticModifier", "parameters", "arguments", "inheritance", "callArguments", 
		"elementAccess", "elementIdentifier", "argumentExpression", "parametersIdentifier", 
		"interpolatedString", "interpolatedStringContent"
	};

	private static readonly string[] _LiteralNames = {
		null, "'module'", "'class'", "'struct'", "'new'", "'function'", "'var'", 
		"'get'", "'set'", "'for'", "'while'", "'static'", "'abstract'", "'public'", 
		"'private'", "'if'", "'else'", "'return'", "'break'", "'null'", "'this'", 
		"'using'", "'import'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'&='", "'|='", "'^='", "'<<='", "'>>='", "'||'", "'&&'", "'!='", "'=='", 
		"'>'", "'>>'", "'>='", "'<'", "'<<'", "'<='", "'-'", "'--'", "'+'", "'++'", 
		"'/'", "'*'", "'!'", "'.'", "'?'", "':'", "'->'", "'%'", "'~'", "'&'", 
		"'^'", "'|'", "'('", "')'", null, null, "'['", "']'", "','", "';'", "'$'", 
		null, "'false'", "'true'", null, null, null, null, null, null, null, null, 
		null, null, "'$\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DeclareModule", "DeclareClass", "DeclareStruct", "DeclareClassInstance", 
		"DeclareFunction", "DeclareVariable", "DeclareGetter", "DeclareSetter", 
		"DeclareForLoop", "DeclareWhileLoop", "DeclareStatic", "DeclareAbstract", 
		"DeclarePublic", "DeclarePrivate", "ControlFlowIf", "ControlFlowElse", 
		"FunctionReturn", "Break", "NullReference", "ThisReference", "UsingDirective", 
		"ImportDirective", "AssignOperator", "PlusAssignOperator", "MinusAssignOperator", 
		"MultiplyAssignOperator", "DivideAssignOperator", "ModuloAssignOperator", 
		"BitwiseAndAssignOperator", "BitwiseOrAssignOperator", "BitwiseXorAssignOperator", 
		"BitwiseLeftShiftAssignOperator", "BitwiseRightShiftAssignOperator", "LogicalOrOperator", 
		"LogicalAndOperator", "UnequalOperator", "EqualOperator", "GreaterOperator", 
		"ShiftRightOperator", "GreaterEqualOperator", "SmallerOperator", "ShiftLeftOperator", 
		"SmallerEqualOperator", "MinusOperator", "MinusMinusOperator", "PlusOperator", 
		"PlusPlusOperator", "DivideOperator", "MultiplyOperator", "LogicalNegationOperator", 
		"DotOperator", "QuestionMarkOperator", "ColonOperator", "ReferenceOperator", 
		"ModuloOperator", "ComplimentOperator", "BitwiseAndOperator", "BitwiseXorOperator", 
		"BitwiseOrOperator", "OpeningRoundBracket", "ClosingRoundBracket", "OpeningCurlyBracket", 
		"ClosingCurlyBracket", "SquarebracketLeft", "SquarebracketRight", "CommaSeperator", 
		"SemicolonSeperator", "DollarOperator", "BooleanLiteral", "False_", "True_", 
		"IntegerLiteral", "FloatingLiteral", "StringLiteral", "UnterminatedStringLiteral", 
		"DecimalLiteral", "Identifier", "COMMENT", "WS", "LINE_COMMENT", "DQUOTE", 
		"DOLLAR_DQUOTE", "LPAR", "RPAR", "TEXT", "LPAR_IN_String", "ESCAPE_SEQUENCE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BITEParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BITEParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BITEParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BITEParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext[] module() {
			return GetRuleContexts<ModuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module(int i) {
			return GetRuleContext<ModuleContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DeclareModule) {
				{
				{
				State = 112;
				module();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDeclarationContext moduleDeclaration() {
			return GetRuleContext<ModuleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BITEParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportDirectiveContext[] importDirective() {
			return GetRuleContexts<ImportDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDirectiveContext importDirective(int i) {
			return GetRuleContext<ImportDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			moduleDeclaration();
			State = 123;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 121;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ImportDirective:
						{
						State = 119;
						importDirective();
						}
						break;
					case UsingDirective:
						{
						State = 120;
						usingDirective();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 125;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DeclareClass) | (1L << DeclareStruct) | (1L << DeclareFunction) | (1L << DeclareVariable) | (1L << DeclareForLoop) | (1L << DeclareWhileLoop) | (1L << DeclareStatic) | (1L << DeclareAbstract) | (1L << DeclarePublic) | (1L << DeclarePrivate) | (1L << ControlFlowIf) | (1L << FunctionReturn) | (1L << Break) | (1L << NullReference) | (1L << ThisReference) | (1L << UsingDirective) | (1L << MinusOperator) | (1L << MinusMinusOperator) | (1L << PlusOperator) | (1L << PlusPlusOperator) | (1L << LogicalNegationOperator) | (1L << ComplimentOperator) | (1L << OpeningRoundBracket) | (1L << OpeningCurlyBracket))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BooleanLiteral - 69)) | (1L << (IntegerLiteral - 69)) | (1L << (FloatingLiteral - 69)) | (1L << (StringLiteral - 69)) | (1L << (Identifier - 69)) | (1L << (DOLLAR_DQUOTE - 69)))) != 0)) {
				{
				{
				State = 126;
				declaration();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 132;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareModule() { return GetToken(BITEParser.DeclareModule, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(BITEParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(BITEParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator() { return GetToken(BITEParser.SemicolonSeperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DotOperator() { return GetTokens(BITEParser.DotOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotOperator(int i) {
			return GetToken(BITEParser.DotOperator, i);
		}
		public ModuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationContext moduleDeclaration() {
		ModuleDeclarationContext _localctx = new ModuleDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_moduleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(DeclareModule);
			State = 135;
			Match(Identifier);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DotOperator) {
				{
				{
				State = 136;
				Match(DotOperator);
				State = 137;
				Match(Identifier);
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 143;
			Match(SemicolonSeperator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ImportDirective() { return GetToken(BITEParser.ImportDirective, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(BITEParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(BITEParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator() { return GetToken(BITEParser.SemicolonSeperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DotOperator() { return GetTokens(BITEParser.DotOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotOperator(int i) {
			return GetToken(BITEParser.DotOperator, i);
		}
		public ImportDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDirectiveContext importDirective() {
		ImportDirectiveContext _localctx = new ImportDirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_importDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(ImportDirective);
			State = 146;
			Match(Identifier);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DotOperator) {
				{
				{
				State = 147;
				Match(DotOperator);
				State = 148;
				Match(Identifier);
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154;
			Match(SemicolonSeperator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UsingDirective() { return GetToken(BITEParser.UsingDirective, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(BITEParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(BITEParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator() { return GetToken(BITEParser.SemicolonSeperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DotOperator() { return GetTokens(BITEParser.DotOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotOperator(int i) {
			return GetToken(BITEParser.DotOperator, i);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(UsingDirective);
			State = 157;
			Match(Identifier);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DotOperator) {
				{
				{
				State = 158;
				Match(DotOperator);
				State = 159;
				Match(Identifier);
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165;
			Match(SemicolonSeperator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInstanceDeclarationContext classInstanceDeclaration() {
			return GetRuleContext<ClassInstanceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				structDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169;
				functionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 170;
				classInstanceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 171;
				variableDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 172;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareClass() { return GetToken(BITEParser.DeclareClass, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BITEParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator() { return GetToken(BITEParser.SemicolonSeperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivateModifierContext privateModifier() {
			return GetRuleContext<PrivateModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublicModifierContext publicModifier() {
			return GetRuleContext<PublicModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractModifierContext abstractModifier() {
			return GetRuleContext<AbstractModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ColonOperator() { return GetToken(BITEParser.ColonOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceContext inheritance() {
			return GetRuleContext<InheritanceContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DeclarePrivate:
				{
				State = 175;
				privateModifier();
				}
				break;
			case DeclarePublic:
				{
				State = 176;
				publicModifier();
				}
				break;
			case DeclareClass:
			case DeclareStatic:
			case DeclareAbstract:
				break;
			default:
				break;
			}
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DeclareStatic:
				{
				State = 179;
				staticModifier();
				}
				break;
			case DeclareAbstract:
				{
				State = 180;
				abstractModifier();
				}
				break;
			case DeclareClass:
				break;
			default:
				break;
			}
			State = 183;
			Match(DeclareClass);
			State = 184;
			Match(Identifier);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ColonOperator) {
				{
				State = 185;
				Match(ColonOperator);
				State = 186;
				inheritance();
				}
			}

			State = 191;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpeningCurlyBracket:
				{
				State = 189;
				block();
				}
				break;
			case SemicolonSeperator:
				{
				State = 190;
				Match(SemicolonSeperator);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareStruct() { return GetToken(BITEParser.DeclareStruct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BITEParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator() { return GetToken(BITEParser.SemicolonSeperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivateModifierContext privateModifier() {
			return GetRuleContext<PrivateModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublicModifierContext publicModifier() {
			return GetRuleContext<PublicModifierContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_structDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DeclarePrivate:
				{
				State = 193;
				privateModifier();
				}
				break;
			case DeclarePublic:
				{
				State = 194;
				publicModifier();
				}
				break;
			case DeclareStruct:
				break;
			default:
				break;
			}
			State = 197;
			Match(DeclareStruct);
			State = 198;
			Match(Identifier);
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpeningCurlyBracket:
				{
				State = 199;
				block();
				}
				break;
			case SemicolonSeperator:
				{
				State = 200;
				Match(SemicolonSeperator);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareFunction() { return GetToken(BITEParser.DeclareFunction, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BITEParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpeningRoundBracket() { return GetToken(BITEParser.OpeningRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClosingRoundBracket() { return GetToken(BITEParser.ClosingRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator() { return GetToken(BITEParser.SemicolonSeperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivateModifierContext privateModifier() {
			return GetRuleContext<PrivateModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublicModifierContext publicModifier() {
			return GetRuleContext<PublicModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractModifierContext abstractModifier() {
			return GetRuleContext<AbstractModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DeclarePrivate:
				{
				State = 203;
				privateModifier();
				}
				break;
			case DeclarePublic:
				{
				State = 204;
				publicModifier();
				}
				break;
			case DeclareFunction:
			case DeclareStatic:
			case DeclareAbstract:
				break;
			default:
				break;
			}
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DeclareStatic:
				{
				State = 207;
				staticModifier();
				}
				break;
			case DeclareAbstract:
				{
				State = 208;
				abstractModifier();
				}
				break;
			case DeclareFunction:
				break;
			default:
				break;
			}
			State = 211;
			Match(DeclareFunction);
			State = 212;
			Match(Identifier);
			State = 213;
			Match(OpeningRoundBracket);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 214;
				parameters();
				}
			}

			State = 217;
			Match(ClosingRoundBracket);
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpeningCurlyBracket:
				{
				State = 218;
				block();
				}
				break;
			case SemicolonSeperator:
				{
				State = 219;
				Match(SemicolonSeperator);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareVariable() { return GetToken(BITEParser.DeclareVariable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(BITEParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(BITEParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignOperator() { return GetToken(BITEParser.AssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareClassInstance() { return GetToken(BITEParser.DeclareClassInstance, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpeningRoundBracket() { return GetToken(BITEParser.OpeningRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClosingRoundBracket() { return GetToken(BITEParser.ClosingRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator() { return GetToken(BITEParser.SemicolonSeperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivateModifierContext privateModifier() {
			return GetRuleContext<PrivateModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublicModifierContext publicModifier() {
			return GetRuleContext<PublicModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DotOperator() { return GetTokens(BITEParser.DotOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotOperator(int i) {
			return GetToken(BITEParser.DotOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassInstanceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceDeclarationContext classInstanceDeclaration() {
		ClassInstanceDeclarationContext _localctx = new ClassInstanceDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_classInstanceDeclaration);
		int _la;
		try {
			State = 264;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DeclareVariable:
			case DeclareStatic:
			case DeclarePublic:
			case DeclarePrivate:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DeclarePrivate:
					{
					State = 222;
					privateModifier();
					}
					break;
				case DeclarePublic:
					{
					State = 223;
					publicModifier();
					}
					break;
				case DeclareVariable:
				case DeclareStatic:
					break;
				default:
					break;
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DeclareStatic) {
					{
					State = 226;
					staticModifier();
					}
				}

				State = 229;
				Match(DeclareVariable);
				State = 230;
				Match(Identifier);
				State = 231;
				Match(AssignOperator);
				State = 232;
				Match(DeclareClassInstance);
				State = 233;
				Match(Identifier);
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DotOperator) {
					{
					{
					State = 234;
					Match(DotOperator);
					State = 235;
					Match(Identifier);
					}
					}
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 241;
				Match(OpeningRoundBracket);
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (NullReference - 19)) | (1L << (ThisReference - 19)) | (1L << (MinusOperator - 19)) | (1L << (MinusMinusOperator - 19)) | (1L << (PlusOperator - 19)) | (1L << (PlusPlusOperator - 19)) | (1L << (LogicalNegationOperator - 19)) | (1L << (ReferenceOperator - 19)) | (1L << (ComplimentOperator - 19)) | (1L << (OpeningRoundBracket - 19)) | (1L << (BooleanLiteral - 19)) | (1L << (IntegerLiteral - 19)) | (1L << (FloatingLiteral - 19)) | (1L << (StringLiteral - 19)) | (1L << (Identifier - 19)) | (1L << (DOLLAR_DQUOTE - 19)))) != 0)) {
					{
					State = 242;
					arguments();
					}
				}

				State = 245;
				Match(ClosingRoundBracket);
				State = 246;
				Match(SemicolonSeperator);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				Match(Identifier);
				State = 248;
				Match(AssignOperator);
				State = 249;
				Match(DeclareClassInstance);
				State = 250;
				Match(Identifier);
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DotOperator) {
					{
					{
					State = 251;
					Match(DotOperator);
					State = 252;
					Match(Identifier);
					}
					}
					State = 257;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 258;
				Match(OpeningRoundBracket);
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (NullReference - 19)) | (1L << (ThisReference - 19)) | (1L << (MinusOperator - 19)) | (1L << (MinusMinusOperator - 19)) | (1L << (PlusOperator - 19)) | (1L << (PlusPlusOperator - 19)) | (1L << (LogicalNegationOperator - 19)) | (1L << (ReferenceOperator - 19)) | (1L << (ComplimentOperator - 19)) | (1L << (OpeningRoundBracket - 19)) | (1L << (BooleanLiteral - 19)) | (1L << (IntegerLiteral - 19)) | (1L << (FloatingLiteral - 19)) | (1L << (StringLiteral - 19)) | (1L << (Identifier - 19)) | (1L << (DOLLAR_DQUOTE - 19)))) != 0)) {
					{
					State = 259;
					arguments();
					}
				}

				State = 262;
				Match(ClosingRoundBracket);
				State = 263;
				Match(SemicolonSeperator);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareVariable() { return GetToken(BITEParser.DeclareVariable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BITEParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator() { return GetToken(BITEParser.SemicolonSeperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivateModifierContext privateModifier() {
			return GetRuleContext<PrivateModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublicModifierContext publicModifier() {
			return GetRuleContext<PublicModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignOperator() { return GetToken(BITEParser.AssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprStatementContext exprStatement() {
			return GetRuleContext<ExprStatementContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DeclarePrivate:
				{
				State = 266;
				privateModifier();
				}
				break;
			case DeclarePublic:
				{
				State = 267;
				publicModifier();
				}
				break;
			case DeclareVariable:
			case DeclareStatic:
				break;
			default:
				break;
			}
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DeclareStatic) {
				{
				State = 270;
				staticModifier();
				}
			}

			State = 273;
			Match(DeclareVariable);
			State = 274;
			Match(Identifier);
			State = 280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case DeclareClass:
			case DeclareStruct:
			case DeclareFunction:
			case DeclareVariable:
			case DeclareForLoop:
			case DeclareWhileLoop:
			case DeclareStatic:
			case DeclareAbstract:
			case DeclarePublic:
			case DeclarePrivate:
			case ControlFlowIf:
			case FunctionReturn:
			case Break:
			case NullReference:
			case ThisReference:
			case UsingDirective:
			case AssignOperator:
			case MinusOperator:
			case MinusMinusOperator:
			case PlusOperator:
			case PlusPlusOperator:
			case LogicalNegationOperator:
			case ComplimentOperator:
			case OpeningRoundBracket:
			case OpeningCurlyBracket:
			case ClosingCurlyBracket:
			case BooleanLiteral:
			case IntegerLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case Identifier:
			case DOLLAR_DQUOTE:
				{
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AssignOperator) {
					{
					State = 275;
					Match(AssignOperator);
					State = 276;
					exprStatement();
					}
				}

				}
				break;
			case SemicolonSeperator:
				{
				State = 279;
				Match(SemicolonSeperator);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 22, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			declaration();
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DeclareClass) | (1L << DeclareStruct) | (1L << DeclareFunction) | (1L << DeclareVariable) | (1L << DeclareForLoop) | (1L << DeclareWhileLoop) | (1L << DeclareStatic) | (1L << DeclareAbstract) | (1L << DeclarePublic) | (1L << DeclarePrivate) | (1L << ControlFlowIf) | (1L << FunctionReturn) | (1L << Break) | (1L << NullReference) | (1L << ThisReference) | (1L << UsingDirective) | (1L << MinusOperator) | (1L << MinusMinusOperator) | (1L << PlusOperator) | (1L << PlusPlusOperator) | (1L << LogicalNegationOperator) | (1L << ComplimentOperator) | (1L << OpeningRoundBracket) | (1L << OpeningCurlyBracket))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BooleanLiteral - 69)) | (1L << (IntegerLiteral - 69)) | (1L << (FloatingLiteral - 69)) | (1L << (StringLiteral - 69)) | (1L << (Identifier - 69)) | (1L << (DOLLAR_DQUOTE - 69)))) != 0)) {
				{
				{
				State = 283;
				declaration();
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprStatementContext exprStatement() {
			return GetRuleContext<ExprStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingStatementContext usingStatement() {
			return GetRuleContext<UsingStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullReference:
			case ThisReference:
			case MinusOperator:
			case MinusMinusOperator:
			case PlusOperator:
			case PlusPlusOperator:
			case LogicalNegationOperator:
			case ComplimentOperator:
			case OpeningRoundBracket:
			case BooleanLiteral:
			case IntegerLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case Identifier:
			case DOLLAR_DQUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289;
				exprStatement();
				}
				break;
			case DeclareForLoop:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				forStatement();
				}
				break;
			case ControlFlowIf:
				EnterOuterAlt(_localctx, 3);
				{
				State = 291;
				ifStatement();
				}
				break;
			case FunctionReturn:
				EnterOuterAlt(_localctx, 4);
				{
				State = 292;
				returnStatement();
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 5);
				{
				State = 293;
				breakStatement();
				}
				break;
			case UsingDirective:
				EnterOuterAlt(_localctx, 6);
				{
				State = 294;
				usingStatement();
				}
				break;
			case DeclareWhileLoop:
				EnterOuterAlt(_localctx, 7);
				{
				State = 295;
				whileStatement();
				}
				break;
			case OpeningCurlyBracket:
				EnterOuterAlt(_localctx, 8);
				{
				State = 296;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator() { return GetToken(BITEParser.SemicolonSeperator, 0); }
		public ExprStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStatementContext exprStatement() {
		ExprStatementContext _localctx = new ExprStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_exprStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			expression();
			State = 300;
			Match(SemicolonSeperator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BITEParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignOperator() { return GetToken(BITEParser.AssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarDeclarationContext localVarDeclaration() {
		LocalVarDeclarationContext _localctx = new LocalVarDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_localVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(Identifier);
			{
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AssignOperator) {
				{
				State = 303;
				Match(AssignOperator);
				State = 304;
				expression();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareVariable() { return GetToken(BITEParser.DeclareVariable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclarationContext[] localVarDeclaration() {
			return GetRuleContexts<LocalVarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclarationContext localVarDeclaration(int i) {
			return GetRuleContext<LocalVarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CommaSeperator() { return GetTokens(BITEParser.CommaSeperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommaSeperator(int i) {
			return GetToken(BITEParser.CommaSeperator, i);
		}
		public LocalVarInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVarInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVarInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarInitializerContext localVarInitializer() {
		LocalVarInitializerContext _localctx = new LocalVarInitializerContext(Context, State);
		EnterRule(_localctx, 30, RULE_localVarInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(DeclareVariable);
			State = 308;
			localVarDeclaration();
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CommaSeperator) {
				{
				{
				State = 309;
				Match(CommaSeperator);
				State = 310;
				localVarDeclaration();
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarInitializerContext localVarInitializer() {
			return GetRuleContext<LocalVarInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CommaSeperator() { return GetTokens(BITEParser.CommaSeperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommaSeperator(int i) {
			return GetToken(BITEParser.CommaSeperator, i);
		}
		public ForInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitializerContext forInitializer() {
		ForInitializerContext _localctx = new ForInitializerContext(Context, State);
		EnterRule(_localctx, 32, RULE_forInitializer);
		int _la;
		try {
			State = 325;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DeclareVariable:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316;
				localVarInitializer();
				}
				break;
			case NullReference:
			case ThisReference:
			case MinusOperator:
			case MinusMinusOperator:
			case PlusOperator:
			case PlusPlusOperator:
			case LogicalNegationOperator:
			case ComplimentOperator:
			case OpeningRoundBracket:
			case BooleanLiteral:
			case IntegerLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case Identifier:
			case DOLLAR_DQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317;
				expression();
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CommaSeperator) {
					{
					{
					State = 318;
					Match(CommaSeperator);
					State = 319;
					expression();
					}
					}
					State = 324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIteratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CommaSeperator() { return GetTokens(BITEParser.CommaSeperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommaSeperator(int i) {
			return GetToken(BITEParser.CommaSeperator, i);
		}
		public ForIteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIterator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIteratorContext forIterator() {
		ForIteratorContext _localctx = new ForIteratorContext(Context, State);
		EnterRule(_localctx, 34, RULE_forIterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			expression();
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CommaSeperator) {
				{
				{
				State = 328;
				Match(CommaSeperator);
				State = 329;
				expression();
				}
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ExpressionContext condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareForLoop() { return GetToken(BITEParser.DeclareForLoop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpeningRoundBracket() { return GetToken(BITEParser.OpeningRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemicolonSeperator() { return GetTokens(BITEParser.SemicolonSeperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator(int i) {
			return GetToken(BITEParser.SemicolonSeperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClosingRoundBracket() { return GetToken(BITEParser.ClosingRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInitializerContext forInitializer() {
			return GetRuleContext<ForInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForIteratorContext forIterator() {
			return GetRuleContext<ForIteratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(DeclareForLoop);
			State = 336;
			Match(OpeningRoundBracket);
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DeclareVariable) | (1L << NullReference) | (1L << ThisReference) | (1L << MinusOperator) | (1L << MinusMinusOperator) | (1L << PlusOperator) | (1L << PlusPlusOperator) | (1L << LogicalNegationOperator) | (1L << ComplimentOperator) | (1L << OpeningRoundBracket))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BooleanLiteral - 69)) | (1L << (IntegerLiteral - 69)) | (1L << (FloatingLiteral - 69)) | (1L << (StringLiteral - 69)) | (1L << (Identifier - 69)) | (1L << (DOLLAR_DQUOTE - 69)))) != 0)) {
				{
				State = 337;
				forInitializer();
				}
			}

			State = 340;
			Match(SemicolonSeperator);
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (NullReference - 19)) | (1L << (ThisReference - 19)) | (1L << (MinusOperator - 19)) | (1L << (MinusMinusOperator - 19)) | (1L << (PlusOperator - 19)) | (1L << (PlusPlusOperator - 19)) | (1L << (LogicalNegationOperator - 19)) | (1L << (ComplimentOperator - 19)) | (1L << (OpeningRoundBracket - 19)) | (1L << (BooleanLiteral - 19)) | (1L << (IntegerLiteral - 19)) | (1L << (FloatingLiteral - 19)) | (1L << (StringLiteral - 19)) | (1L << (Identifier - 19)) | (1L << (DOLLAR_DQUOTE - 19)))) != 0)) {
				{
				State = 341;
				_localctx.condition = expression();
				}
			}

			State = 344;
			Match(SemicolonSeperator);
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (NullReference - 19)) | (1L << (ThisReference - 19)) | (1L << (MinusOperator - 19)) | (1L << (MinusMinusOperator - 19)) | (1L << (PlusOperator - 19)) | (1L << (PlusPlusOperator - 19)) | (1L << (LogicalNegationOperator - 19)) | (1L << (ComplimentOperator - 19)) | (1L << (OpeningRoundBracket - 19)) | (1L << (BooleanLiteral - 19)) | (1L << (IntegerLiteral - 19)) | (1L << (FloatingLiteral - 19)) | (1L << (StringLiteral - 19)) | (1L << (Identifier - 19)) | (1L << (DOLLAR_DQUOTE - 19)))) != 0)) {
				{
				State = 345;
				forIterator();
				}
			}

			State = 348;
			Match(ClosingRoundBracket);
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 349;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public StatementContext trueStatement;
		public StatementContext falseStatement;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ControlFlowIf() { return GetToken(BITEParser.ControlFlowIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpeningRoundBracket() { return GetToken(BITEParser.OpeningRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClosingRoundBracket() { return GetToken(BITEParser.ClosingRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ControlFlowElse() { return GetToken(BITEParser.ControlFlowElse, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(ControlFlowIf);
			State = 353;
			Match(OpeningRoundBracket);
			State = 354;
			expression();
			State = 355;
			Match(ClosingRoundBracket);
			State = 356;
			_localctx.trueStatement = statement();
			State = 359;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 357;
				Match(ControlFlowElse);
				State = 358;
				_localctx.falseStatement = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionReturn() { return GetToken(BITEParser.FunctionReturn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator() { return GetToken(BITEParser.SemicolonSeperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(FunctionReturn);
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (NullReference - 19)) | (1L << (ThisReference - 19)) | (1L << (MinusOperator - 19)) | (1L << (MinusMinusOperator - 19)) | (1L << (PlusOperator - 19)) | (1L << (PlusPlusOperator - 19)) | (1L << (LogicalNegationOperator - 19)) | (1L << (ComplimentOperator - 19)) | (1L << (OpeningRoundBracket - 19)) | (1L << (BooleanLiteral - 19)) | (1L << (IntegerLiteral - 19)) | (1L << (FloatingLiteral - 19)) | (1L << (StringLiteral - 19)) | (1L << (Identifier - 19)) | (1L << (DOLLAR_DQUOTE - 19)))) != 0)) {
				{
				State = 362;
				expression();
				}
			}

			State = 365;
			Match(SemicolonSeperator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(BITEParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemicolonSeperator() { return GetToken(BITEParser.SemicolonSeperator, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(Break);
			State = 368;
			Match(SemicolonSeperator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UsingDirective() { return GetToken(BITEParser.UsingDirective, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpeningRoundBracket() { return GetToken(BITEParser.OpeningRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClosingRoundBracket() { return GetToken(BITEParser.ClosingRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UsingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingStatementContext usingStatement() {
		UsingStatementContext _localctx = new UsingStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_usingStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(UsingDirective);
			State = 371;
			Match(OpeningRoundBracket);
			State = 372;
			expression();
			State = 373;
			Match(ClosingRoundBracket);
			State = 374;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareWhileLoop() { return GetToken(BITEParser.DeclareWhileLoop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpeningRoundBracket() { return GetToken(BITEParser.OpeningRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClosingRoundBracket() { return GetToken(BITEParser.ClosingRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(DeclareWhileLoop);
			State = 377;
			Match(OpeningRoundBracket);
			State = 378;
			expression();
			State = 379;
			Match(ClosingRoundBracket);
			State = 380;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpeningCurlyBracket() { return GetToken(BITEParser.OpeningCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClosingCurlyBracket() { return GetToken(BITEParser.ClosingCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(OpeningCurlyBracket);
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DeclareClass) | (1L << DeclareStruct) | (1L << DeclareFunction) | (1L << DeclareVariable) | (1L << DeclareForLoop) | (1L << DeclareWhileLoop) | (1L << DeclareStatic) | (1L << DeclareAbstract) | (1L << DeclarePublic) | (1L << DeclarePrivate) | (1L << ControlFlowIf) | (1L << FunctionReturn) | (1L << Break) | (1L << NullReference) | (1L << ThisReference) | (1L << UsingDirective) | (1L << MinusOperator) | (1L << MinusMinusOperator) | (1L << PlusOperator) | (1L << PlusPlusOperator) | (1L << LogicalNegationOperator) | (1L << ComplimentOperator) | (1L << OpeningRoundBracket) | (1L << OpeningCurlyBracket))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BooleanLiteral - 69)) | (1L << (IntegerLiteral - 69)) | (1L << (FloatingLiteral - 69)) | (1L << (StringLiteral - 69)) | (1L << (Identifier - 69)) | (1L << (DOLLAR_DQUOTE - 69)))) != 0)) {
				{
				{
				State = 383;
				declaration();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 389;
			Match(ClosingCurlyBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_expression);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392;
				lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignOperator() { return GetToken(BITEParser.AssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssignOperator() { return GetToken(BITEParser.MinusAssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssignOperator() { return GetToken(BITEParser.PlusAssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssignOperator() { return GetToken(BITEParser.MultiplyAssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssignOperator() { return GetToken(BITEParser.DivideAssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModuloAssignOperator() { return GetToken(BITEParser.ModuloAssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseAndAssignOperator() { return GetToken(BITEParser.BitwiseAndAssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseOrAssignOperator() { return GetToken(BITEParser.BitwiseOrAssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseXorAssignOperator() { return GetToken(BITEParser.BitwiseXorAssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseLeftShiftAssignOperator() { return GetToken(BITEParser.BitwiseLeftShiftAssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseRightShiftAssignOperator() { return GetToken(BITEParser.BitwiseRightShiftAssignOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 52, RULE_assignment);
		int _la;
		try {
			State = 400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395;
				call();
				State = 396;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AssignOperator) | (1L << PlusAssignOperator) | (1L << MinusAssignOperator) | (1L << MultiplyAssignOperator) | (1L << DivideAssignOperator) | (1L << ModuloAssignOperator) | (1L << BitwiseAndAssignOperator) | (1L << BitwiseOrAssignOperator) | (1L << BitwiseXorAssignOperator) | (1L << BitwiseLeftShiftAssignOperator) | (1L << BitwiseRightShiftAssignOperator))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 397;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 399;
				ternary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallArgumentsContext callArguments() {
			return GetRuleContext<CallArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReferenceOperator() { return GetToken(BITEParser.ReferenceOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			callArguments();
			State = 403;
			Match(ReferenceOperator);
			State = 404;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicOrContext[] logicOr() {
			return GetRuleContexts<LogicOrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicOrContext logicOr(int i) {
			return GetRuleContext<LogicOrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QuestionMarkOperator() { return GetTokens(BITEParser.QuestionMarkOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkOperator(int i) {
			return GetToken(BITEParser.QuestionMarkOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ColonOperator() { return GetTokens(BITEParser.ColonOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ColonOperator(int i) {
			return GetToken(BITEParser.ColonOperator, i);
		}
		public TernaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryContext ternary() {
		TernaryContext _localctx = new TernaryContext(Context, State);
		EnterRule(_localctx, 56, RULE_ternary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			logicOr();
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==QuestionMarkOperator) {
				{
				{
				State = 407;
				Match(QuestionMarkOperator);
				State = 408;
				logicOr();
				State = 409;
				Match(ColonOperator);
				State = 410;
				logicOr();
				}
				}
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicOrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicAndContext[] logicAnd() {
			return GetRuleContexts<LogicAndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicAndContext logicAnd(int i) {
			return GetRuleContext<LogicAndContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LogicalOrOperator() { return GetTokens(BITEParser.LogicalOrOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalOrOperator(int i) {
			return GetToken(BITEParser.LogicalOrOperator, i);
		}
		public LogicOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicOrContext logicOr() {
		LogicOrContext _localctx = new LogicOrContext(Context, State);
		EnterRule(_localctx, 58, RULE_logicOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			logicAnd();
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LogicalOrOperator) {
				{
				{
				State = 418;
				Match(LogicalOrOperator);
				State = 419;
				logicAnd();
				}
				}
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicAndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrContext[] bitwiseOr() {
			return GetRuleContexts<BitwiseOrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrContext bitwiseOr(int i) {
			return GetRuleContext<BitwiseOrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LogicalAndOperator() { return GetTokens(BITEParser.LogicalAndOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalAndOperator(int i) {
			return GetToken(BITEParser.LogicalAndOperator, i);
		}
		public LogicAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicAndContext logicAnd() {
		LogicAndContext _localctx = new LogicAndContext(Context, State);
		EnterRule(_localctx, 60, RULE_logicAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			bitwiseOr();
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LogicalAndOperator) {
				{
				{
				State = 426;
				Match(LogicalAndOperator);
				State = 427;
				bitwiseOr();
				}
				}
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseOrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseXorContext[] bitwiseXor() {
			return GetRuleContexts<BitwiseXorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseXorContext bitwiseXor(int i) {
			return GetRuleContext<BitwiseXorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BitwiseOrOperator() { return GetTokens(BITEParser.BitwiseOrOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseOrOperator(int i) {
			return GetToken(BITEParser.BitwiseOrOperator, i);
		}
		public BitwiseOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrContext bitwiseOr() {
		BitwiseOrContext _localctx = new BitwiseOrContext(Context, State);
		EnterRule(_localctx, 62, RULE_bitwiseOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			bitwiseXor();
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BitwiseOrOperator) {
				{
				{
				State = 434;
				Match(BitwiseOrOperator);
				State = 435;
				bitwiseXor();
				}
				}
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseXorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndContext[] bitwiseAnd() {
			return GetRuleContexts<BitwiseAndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndContext bitwiseAnd(int i) {
			return GetRuleContext<BitwiseAndContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BitwiseXorOperator() { return GetTokens(BITEParser.BitwiseXorOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseXorOperator(int i) {
			return GetToken(BITEParser.BitwiseXorOperator, i);
		}
		public BitwiseXorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseXor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseXorContext bitwiseXor() {
		BitwiseXorContext _localctx = new BitwiseXorContext(Context, State);
		EnterRule(_localctx, 64, RULE_bitwiseXor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			bitwiseAnd();
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BitwiseXorOperator) {
				{
				{
				State = 442;
				Match(BitwiseXorOperator);
				State = 443;
				bitwiseAnd();
				}
				}
				State = 448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseAndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BitwiseAndOperator() { return GetTokens(BITEParser.BitwiseAndOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseAndOperator(int i) {
			return GetToken(BITEParser.BitwiseAndOperator, i);
		}
		public BitwiseAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndContext bitwiseAnd() {
		BitwiseAndContext _localctx = new BitwiseAndContext(Context, State);
		EnterRule(_localctx, 66, RULE_bitwiseAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			equality();
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BitwiseAndOperator) {
				{
				{
				State = 450;
				Match(BitwiseAndOperator);
				State = 451;
				equality();
				}
				}
				State = 456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalContext[] relational() {
			return GetRuleContexts<RelationalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalContext relational(int i) {
			return GetRuleContext<RelationalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UnequalOperator() { return GetTokens(BITEParser.UnequalOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnequalOperator(int i) {
			return GetToken(BITEParser.UnequalOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EqualOperator() { return GetTokens(BITEParser.EqualOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EqualOperator(int i) {
			return GetToken(BITEParser.EqualOperator, i);
		}
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		EqualityContext _localctx = new EqualityContext(Context, State);
		EnterRule(_localctx, 68, RULE_equality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			relational();
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UnequalOperator || _la==EqualOperator) {
				{
				{
				State = 458;
				_la = TokenStream.LA(1);
				if ( !(_la==UnequalOperator || _la==EqualOperator) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 459;
				relational();
				}
				}
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftContext[] shift() {
			return GetRuleContexts<ShiftContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftContext shift(int i) {
			return GetRuleContext<ShiftContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterOperator() { return GetTokens(BITEParser.GreaterOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterOperator(int i) {
			return GetToken(BITEParser.GreaterOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterEqualOperator() { return GetTokens(BITEParser.GreaterEqualOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqualOperator(int i) {
			return GetToken(BITEParser.GreaterEqualOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SmallerOperator() { return GetTokens(BITEParser.SmallerOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SmallerOperator(int i) {
			return GetToken(BITEParser.SmallerOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SmallerEqualOperator() { return GetTokens(BITEParser.SmallerEqualOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SmallerEqualOperator(int i) {
			return GetToken(BITEParser.SmallerEqualOperator, i);
		}
		public RelationalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalContext relational() {
		RelationalContext _localctx = new RelationalContext(Context, State);
		EnterRule(_localctx, 70, RULE_relational);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			shift();
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GreaterOperator) | (1L << GreaterEqualOperator) | (1L << SmallerOperator) | (1L << SmallerEqualOperator))) != 0)) {
				{
				{
				State = 466;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GreaterOperator) | (1L << GreaterEqualOperator) | (1L << SmallerOperator) | (1L << SmallerEqualOperator))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 467;
				shift();
				}
				}
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveContext[] additive() {
			return GetRuleContexts<AdditiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveContext additive(int i) {
			return GetRuleContext<AdditiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ShiftLeftOperator() { return GetTokens(BITEParser.ShiftLeftOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShiftLeftOperator(int i) {
			return GetToken(BITEParser.ShiftLeftOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ShiftRightOperator() { return GetTokens(BITEParser.ShiftRightOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShiftRightOperator(int i) {
			return GetToken(BITEParser.ShiftRightOperator, i);
		}
		public ShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftContext shift() {
		ShiftContext _localctx = new ShiftContext(Context, State);
		EnterRule(_localctx, 72, RULE_shift);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			additive();
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ShiftRightOperator || _la==ShiftLeftOperator) {
				{
				{
				State = 474;
				_la = TokenStream.LA(1);
				if ( !(_la==ShiftRightOperator || _la==ShiftLeftOperator) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 475;
				additive();
				}
				}
				State = 480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeContext[] multiplicative() {
			return GetRuleContexts<MultiplicativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeContext multiplicative(int i) {
			return GetRuleContext<MultiplicativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MinusOperator() { return GetTokens(BITEParser.MinusOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusOperator(int i) {
			return GetToken(BITEParser.MinusOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PlusOperator() { return GetTokens(BITEParser.PlusOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusOperator(int i) {
			return GetToken(BITEParser.PlusOperator, i);
		}
		public AdditiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveContext additive() {
		AdditiveContext _localctx = new AdditiveContext(Context, State);
		EnterRule(_localctx, 74, RULE_additive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			multiplicative();
			State = 486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MinusOperator || _la==PlusOperator) {
				{
				{
				State = 482;
				_la = TokenStream.LA(1);
				if ( !(_la==MinusOperator || _la==PlusOperator) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 483;
				multiplicative();
				}
				}
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DivideOperator() { return GetTokens(BITEParser.DivideOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideOperator(int i) {
			return GetToken(BITEParser.DivideOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MultiplyOperator() { return GetTokens(BITEParser.MultiplyOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyOperator(int i) {
			return GetToken(BITEParser.MultiplyOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ModuloOperator() { return GetTokens(BITEParser.ModuloOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModuloOperator(int i) {
			return GetToken(BITEParser.ModuloOperator, i);
		}
		public MultiplicativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeContext multiplicative() {
		MultiplicativeContext _localctx = new MultiplicativeContext(Context, State);
		EnterRule(_localctx, 76, RULE_multiplicative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			unary(0);
			State = 494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DivideOperator) | (1L << MultiplyOperator) | (1L << ModuloOperator))) != 0)) {
				{
				{
				State = 490;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DivideOperator) | (1L << MultiplyOperator) | (1L << ModuloOperator))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 491;
				unary(0);
				}
				}
				State = 496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalNegationOperator() { return GetToken(BITEParser.LogicalNegationOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusOperator() { return GetToken(BITEParser.MinusOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusOperator() { return GetToken(BITEParser.PlusOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlusOperator() { return GetToken(BITEParser.PlusPlusOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinusOperator() { return GetToken(BITEParser.MinusMinusOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ComplimentOperator() { return GetToken(BITEParser.ComplimentOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		return unary(0);
	}

	private UnaryContext unary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UnaryContext _localctx = new UnaryContext(Context, _parentState);
		UnaryContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_unary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MinusOperator:
			case MinusMinusOperator:
			case PlusOperator:
			case PlusPlusOperator:
			case LogicalNegationOperator:
			case ComplimentOperator:
				{
				State = 498;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MinusOperator) | (1L << MinusMinusOperator) | (1L << PlusOperator) | (1L << PlusPlusOperator) | (1L << LogicalNegationOperator) | (1L << ComplimentOperator))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 499;
				unary(3);
				}
				break;
			case NullReference:
			case ThisReference:
			case OpeningRoundBracket:
			case BooleanLiteral:
			case IntegerLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case Identifier:
			case DOLLAR_DQUOTE:
				{
				State = 500;
				call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 507;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UnaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_unary);
					State = 503;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 504;
					_la = TokenStream.LA(1);
					if ( !(_la==MinusMinusOperator || _la==PlusPlusOperator) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 509;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallArgumentsContext[] callArguments() {
			return GetRuleContexts<CallArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallArgumentsContext callArguments(int i) {
			return GetRuleContext<CallArgumentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DotOperator() { return GetTokens(BITEParser.DotOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotOperator(int i) {
			return GetToken(BITEParser.DotOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(BITEParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(BITEParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementAccessContext[] elementAccess() {
			return GetRuleContexts<ElementAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementAccessContext elementAccess(int i) {
			return GetRuleContext<ElementAccessContext>(i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 80, RULE_call);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			primary();
			State = 517;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 515;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OpeningRoundBracket:
						{
						State = 511;
						callArguments();
						}
						break;
					case DotOperator:
						{
						State = 512;
						Match(DotOperator);
						State = 513;
						Match(Identifier);
						}
						break;
					case SquarebracketLeft:
						{
						State = 514;
						elementAccess();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 519;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(BITEParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullReference() { return GetToken(BITEParser.NullReference, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ThisReference() { return GetToken(BITEParser.ThisReference, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(BITEParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingLiteral() { return GetToken(BITEParser.FloatingLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpeningRoundBracket() { return GetToken(BITEParser.OpeningRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClosingRoundBracket() { return GetToken(BITEParser.ClosingRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BITEParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(BITEParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedStringContext interpolatedString() {
			return GetRuleContext<InterpolatedStringContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 82, RULE_primary);
		try {
			State = 533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520;
				Match(BooleanLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 521;
				Match(NullReference);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 522;
				Match(ThisReference);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 523;
				Match(IntegerLiteral);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 524;
				Match(FloatingLiteral);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 525;
				Match(OpeningRoundBracket);
				State = 526;
				expression();
				State = 527;
				Match(ClosingRoundBracket);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 529;
				Match(Identifier);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 530;
				Match(StringLiteral);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 531;
				Match(StringLiteral);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 532;
				interpolatedString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivateModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclarePrivate() { return GetToken(BITEParser.DeclarePrivate, 0); }
		public PrivateModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privateModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivateModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivateModifierContext privateModifier() {
		PrivateModifierContext _localctx = new PrivateModifierContext(Context, State);
		EnterRule(_localctx, 84, RULE_privateModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(DeclarePrivate);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublicModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclarePublic() { return GetToken(BITEParser.DeclarePublic, 0); }
		public PublicModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publicModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublicModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublicModifierContext publicModifier() {
		PublicModifierContext _localctx = new PublicModifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_publicModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(DeclarePublic);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareAbstract() { return GetToken(BITEParser.DeclareAbstract, 0); }
		public AbstractModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractModifierContext abstractModifier() {
		AbstractModifierContext _localctx = new AbstractModifierContext(Context, State);
		EnterRule(_localctx, 88, RULE_abstractModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(DeclareAbstract);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareStatic() { return GetToken(BITEParser.DeclareStatic, 0); }
		public StaticModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticModifierContext staticModifier() {
		StaticModifierContext _localctx = new StaticModifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_staticModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(DeclareStatic);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersIdentifierContext[] parametersIdentifier() {
			return GetRuleContexts<ParametersIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersIdentifierContext parametersIdentifier(int i) {
			return GetRuleContext<ParametersIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CommaSeperator() { return GetTokens(BITEParser.CommaSeperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommaSeperator(int i) {
			return GetToken(BITEParser.CommaSeperator, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 92, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			parametersIdentifier();
			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CommaSeperator) {
				{
				{
				State = 544;
				Match(CommaSeperator);
				State = 545;
				parametersIdentifier();
				}
				}
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext[] argumentExpression() {
			return GetRuleContexts<ArgumentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext argumentExpression(int i) {
			return GetRuleContext<ArgumentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CommaSeperator() { return GetTokens(BITEParser.CommaSeperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommaSeperator(int i) {
			return GetToken(BITEParser.CommaSeperator, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 94, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			argumentExpression();
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CommaSeperator) {
				{
				{
				State = 552;
				Match(CommaSeperator);
				State = 553;
				argumentExpression();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(BITEParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(BITEParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CommaSeperator() { return GetTokens(BITEParser.CommaSeperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommaSeperator(int i) {
			return GetToken(BITEParser.CommaSeperator, i);
		}
		public InheritanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceContext inheritance() {
		InheritanceContext _localctx = new InheritanceContext(Context, State);
		EnterRule(_localctx, 96, RULE_inheritance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(Identifier);
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CommaSeperator) {
				{
				{
				State = 560;
				Match(CommaSeperator);
				State = 561;
				Match(Identifier);
				}
				}
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpeningRoundBracket() { return GetToken(BITEParser.OpeningRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClosingRoundBracket() { return GetToken(BITEParser.ClosingRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public CallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgumentsContext callArguments() {
		CallArgumentsContext _localctx = new CallArgumentsContext(Context, State);
		EnterRule(_localctx, 98, RULE_callArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(OpeningRoundBracket);
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (NullReference - 19)) | (1L << (ThisReference - 19)) | (1L << (MinusOperator - 19)) | (1L << (MinusMinusOperator - 19)) | (1L << (PlusOperator - 19)) | (1L << (PlusPlusOperator - 19)) | (1L << (LogicalNegationOperator - 19)) | (1L << (ReferenceOperator - 19)) | (1L << (ComplimentOperator - 19)) | (1L << (OpeningRoundBracket - 19)) | (1L << (BooleanLiteral - 19)) | (1L << (IntegerLiteral - 19)) | (1L << (FloatingLiteral - 19)) | (1L << (StringLiteral - 19)) | (1L << (Identifier - 19)) | (1L << (DOLLAR_DQUOTE - 19)))) != 0)) {
				{
				State = 568;
				arguments();
				}
			}

			State = 571;
			Match(ClosingRoundBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SquarebracketLeft() { return GetTokens(BITEParser.SquarebracketLeft); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SquarebracketLeft(int i) {
			return GetToken(BITEParser.SquarebracketLeft, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementIdentifierContext[] elementIdentifier() {
			return GetRuleContexts<ElementIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementIdentifierContext elementIdentifier(int i) {
			return GetRuleContext<ElementIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SquarebracketRight() { return GetTokens(BITEParser.SquarebracketRight); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SquarebracketRight(int i) {
			return GetToken(BITEParser.SquarebracketRight, i);
		}
		public ElementAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementAccessContext elementAccess() {
		ElementAccessContext _localctx = new ElementAccessContext(Context, State);
		EnterRule(_localctx, 100, RULE_elementAccess);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 573;
					Match(SquarebracketLeft);
					State = 574;
					elementIdentifier();
					State = 575;
					Match(SquarebracketRight);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 579;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(BITEParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(BITEParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public ElementIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementIdentifierContext elementIdentifier() {
		ElementIdentifierContext _localctx = new ElementIdentifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_elementIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 581;
				Match(IntegerLiteral);
				}
				break;
			case 2:
				{
				State = 582;
				Match(StringLiteral);
				}
				break;
			case 3:
				{
				State = 583;
				call();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReferenceOperator() { return GetToken(BITEParser.ReferenceOperator, 0); }
		public ArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionContext argumentExpression() {
		ArgumentExpressionContext _localctx = new ArgumentExpressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_argumentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ReferenceOperator) {
				{
				State = 586;
				Match(ReferenceOperator);
				}
			}

			State = 589;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BITEParser.Identifier, 0); }
		public ParametersIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersIdentifierContext parametersIdentifier() {
		ParametersIdentifierContext _localctx = new ParametersIdentifierContext(Context, State);
		EnterRule(_localctx, 106, RULE_parametersIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR_DQUOTE() { return GetToken(BITEParser.DOLLAR_DQUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE() { return GetToken(BITEParser.DQUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedStringContentContext[] interpolatedStringContent() {
			return GetRuleContexts<InterpolatedStringContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedStringContentContext interpolatedStringContent(int i) {
			return GetRuleContext<InterpolatedStringContentContext>(i);
		}
		public InterpolatedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolatedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedStringContext interpolatedString() {
		InterpolatedStringContext _localctx = new InterpolatedStringContext(Context, State);
		EnterRule(_localctx, 108, RULE_interpolatedString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(DOLLAR_DQUOTE);
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (LPAR - 83)) | (1L << (TEXT - 83)) | (1L << (ESCAPE_SEQUENCE - 83)))) != 0)) {
				{
				{
				State = 594;
				interpolatedStringContent();
				}
				}
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 600;
			Match(DQUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedStringContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(BITEParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SEQUENCE() { return GetToken(BITEParser.ESCAPE_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(BITEParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(BITEParser.RPAR, 0); }
		public InterpolatedStringContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedStringContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBITEParserVisitor<TResult> typedVisitor = visitor as IBITEParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolatedStringContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedStringContentContext interpolatedStringContent() {
		InterpolatedStringContentContext _localctx = new InterpolatedStringContentContext(Context, State);
		EnterRule(_localctx, 110, RULE_interpolatedStringContent);
		try {
			State = 608;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 602;
				Match(TEXT);
				}
				break;
			case ESCAPE_SEQUENCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 603;
				Match(ESCAPE_SEQUENCE);
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 604;
				Match(LPAR);
				State = 605;
				expression();
				State = 606;
				Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 39: return unary_sempred((UnaryContext)_localctx, predIndex);
		}
		return true;
	}
	private bool unary_sempred(UnaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'Y', '\x265', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x3', '\x2', '\a', '\x2', 't', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'w', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'|', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x7F', '\v', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\x82', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x85', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '\x8D', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x90', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x98', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x9B', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\xA3', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xA6', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xB0', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\xB4', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\xB8', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\xBE', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\xC2', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xC6', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\xCC', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xD0', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xD4', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xDA', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xDF', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xE3', '\n', '\v', 
		'\x3', '\v', '\x5', '\v', '\xE6', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\xEF', '\n', '\v', '\f', '\v', '\xE', '\v', '\xF2', '\v', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\xF6', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', '\x100', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '\x103', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x107', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x10B', '\n', '\v', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '\x10F', '\n', '\f', '\x3', '\f', 
		'\x5', '\f', '\x112', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\x118', '\n', '\f', '\x3', '\f', '\x5', '\f', 
		'\x11B', '\n', '\f', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x11F', '\n', 
		'\r', '\f', '\r', '\xE', '\r', '\x122', '\v', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x12C', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x134', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\a', '\x11', '\x13A', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\x13D', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\x143', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x146', '\v', '\x12', '\x5', '\x12', '\x148', '\n', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x14D', '\n', 
		'\x13', '\f', '\x13', '\xE', '\x13', '\x150', '\v', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x155', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x159', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\x15D', '\n', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\x161', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x16A', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x16E', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\a', '\x1A', '\x183', '\n', '\x1A', '\f', '\x1A', '\xE', 
		'\x1A', '\x186', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x18C', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x193', 
		'\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\a', '\x1E', '\x19F', '\n', '\x1E', '\f', '\x1E', '\xE', 
		'\x1E', '\x1A2', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\a', '\x1F', '\x1A7', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x1AA', 
		'\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x1AF', 
		'\n', ' ', '\f', ' ', '\xE', ' ', '\x1B2', '\v', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\a', '!', '\x1B7', '\n', '!', '\f', '!', '\xE', '!', 
		'\x1BA', '\v', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', 
		'\x1BF', '\n', '\"', '\f', '\"', '\xE', '\"', '\x1C2', '\v', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\a', '#', '\x1C7', '\n', '#', '\f', '#', 
		'\xE', '#', '\x1CA', '\v', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\a', 
		'$', '\x1CF', '\n', '$', '\f', '$', '\xE', '$', '\x1D2', '\v', '$', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\a', '%', '\x1D7', '\n', '%', '\f', '%', 
		'\xE', '%', '\x1DA', '\v', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\a', 
		'&', '\x1DF', '\n', '&', '\f', '&', '\xE', '&', '\x1E2', '\v', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\a', '\'', '\x1E7', '\n', '\'', '\f', 
		'\'', '\xE', '\'', '\x1EA', '\v', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\a', '(', '\x1EF', '\n', '(', '\f', '(', '\xE', '(', '\x1F2', '\v', 
		'(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x1F8', 
		'\n', ')', '\x3', ')', '\x3', ')', '\a', ')', '\x1FC', '\n', ')', '\f', 
		')', '\xE', ')', '\x1FF', '\v', ')', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\a', '*', '\x206', '\n', '*', '\f', '*', '\xE', 
		'*', '\x209', '\v', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x218', '\n', '+', '\x3', 
		',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', 
		'/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', 
		'\x225', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x228', '\v', '\x30', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x22D', '\n', 
		'\x31', '\f', '\x31', '\xE', '\x31', '\x230', '\v', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x235', '\n', '\x32', '\f', 
		'\x32', '\xE', '\x32', '\x238', '\v', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\x5', '\x33', '\x23C', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x6', '\x34', '\x244', 
		'\n', '\x34', '\r', '\x34', '\xE', '\x34', '\x245', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x5', '\x35', '\x24B', '\n', '\x35', '\x3', '\x36', 
		'\x5', '\x36', '\x24E', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\a', '\x38', '\x256', 
		'\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x259', '\v', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x263', '\n', '\x39', 
		'\x3', '\x39', '\x2', '\x3', 'P', ':', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', '\x2', '\n', '\x3', '\x2', '\x19', '#', '\x3', 
		'\x2', '&', '\'', '\x5', '\x2', '(', '(', '*', '+', '-', '-', '\x4', '\x2', 
		')', ')', ',', ',', '\x4', '\x2', '.', '.', '\x30', '\x30', '\x4', '\x2', 
		'\x32', '\x33', '\x39', '\x39', '\x5', '\x2', '.', '\x31', '\x34', '\x34', 
		':', ':', '\x4', '\x2', '/', '/', '\x31', '\x31', '\x2', '\x28E', '\x2', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x4', 'x', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x88', '\x3', '\x2', '\x2', '\x2', '\b', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x9E', '\x3', '\x2', '\x2', '\x2', '\f', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x12', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x16', '\x10E', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x12D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x130', '\x3', '\x2', '\x2', '\x2', ' ', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x149', '\x3', '\x2', '\x2', '\x2', '&', '\x151', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x162', '\x3', '\x2', '\x2', '\x2', '*', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x174', '\x3', '\x2', '\x2', '\x2', '\x30', '\x17A', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x180', '\x3', '\x2', '\x2', '\x2', '\x34', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x192', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x194', '\x3', '\x2', '\x2', '\x2', ':', '\x198', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x1A3', '\x3', '\x2', '\x2', '\x2', '>', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1C3', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1CB', '\x3', '\x2', '\x2', '\x2', 'H', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1E3', '\x3', '\x2', '\x2', '\x2', 'N', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1F7', '\x3', '\x2', '\x2', '\x2', 'R', '\x200', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x219', '\x3', '\x2', '\x2', '\x2', 'X', '\x21B', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x21D', '\x3', '\x2', '\x2', '\x2', '\\', '\x21F', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x229', '\x3', '\x2', '\x2', '\x2', '\x62', '\x231', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x239', '\x3', '\x2', '\x2', '\x2', '\x66', '\x243', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x24A', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x24D', '\x3', '\x2', '\x2', '\x2', 'l', '\x251', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x253', '\x3', '\x2', '\x2', '\x2', 'p', '\x262', 
		'\x3', '\x2', '\x2', '\x2', 'r', 't', '\x5', '\x4', '\x3', '\x2', 's', 
		'r', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', '\x2', 
		'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x3', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'x', '}', '\x5', '\x6', '\x4', '\x2', 'y', '|', '\x5', '\b', '\x5', 
		'\x2', 'z', '|', '\x5', '\n', '\x6', '\x2', '{', 'y', '\x3', '\x2', '\x2', 
		'\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x83', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x82', '\x5', '\f', '\a', '\x2', '\x81', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x2', '\x2', 
		'\x3', '\x87', '\x5', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', 
		'\x3', '\x2', '\x2', '\x89', '\x8E', '\a', 'O', '\x2', '\x2', '\x8A', 
		'\x8B', '\a', '\x35', '\x2', '\x2', '\x8B', '\x8D', '\a', 'O', '\x2', 
		'\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\a', 
		'\x45', '\x2', '\x2', '\x92', '\a', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\a', '\x18', '\x2', '\x2', '\x94', '\x99', '\a', 'O', '\x2', 
		'\x2', '\x95', '\x96', '\a', '\x35', '\x2', '\x2', '\x96', '\x98', '\a', 
		'O', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\a', '\x45', '\x2', '\x2', '\x9D', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '\x17', '\x2', '\x2', '\x9F', '\xA4', '\a', 
		'O', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x35', '\x2', '\x2', '\xA1', 
		'\xA3', '\a', 'O', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\a', '\x45', '\x2', '\x2', '\xA8', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xB0', '\x5', '\xE', '\b', '\x2', '\xAA', 
		'\xB0', '\x5', '\x10', '\t', '\x2', '\xAB', '\xB0', '\x5', '\x12', '\n', 
		'\x2', '\xAC', '\xB0', '\x5', '\x14', '\v', '\x2', '\xAD', '\xB0', '\x5', 
		'\x16', '\f', '\x2', '\xAE', '\xB0', '\x5', '\x1A', '\xE', '\x2', '\xAF', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB4', '\x5', 'V', ',', '\x2', '\xB2', '\xB4', '\x5', 
		'X', '-', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8', '\x5', '\\', 
		'/', '\x2', '\xB6', '\xB8', '\x5', 'Z', '.', '\x2', '\xB7', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBA', '\a', '\x4', '\x2', '\x2', '\xBA', '\xBD', '\a', 
		'O', '\x2', '\x2', '\xBB', '\xBC', '\a', '\x37', '\x2', '\x2', '\xBC', 
		'\xBE', '\x5', '\x62', '\x32', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC2', '\x5', '\x32', '\x1A', '\x2', '\xC0', 
		'\xC2', '\a', '\x45', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC6', '\x5', 'V', ',', '\x2', '\xC4', '\xC6', 
		'\x5', 'X', '-', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', 
		'\x5', '\x2', '\x2', '\xC8', '\xCB', '\a', 'O', '\x2', '\x2', '\xC9', 
		'\xCC', '\x5', '\x32', '\x1A', '\x2', '\xCA', '\xCC', '\a', '\x45', '\x2', 
		'\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\x11', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xD0', '\x5', 'V', ',', '\x2', '\xCE', '\xD0', '\x5', 'X', '-', '\x2', 
		'\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD4', '\x5', '\\', '/', '\x2', '\xD2', 
		'\xD4', '\x5', 'Z', '.', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\xD3', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', 
		'\a', '\a', '\x2', '\x2', '\xD6', '\xD7', '\a', 'O', '\x2', '\x2', '\xD7', 
		'\xD9', '\a', '>', '\x2', '\x2', '\xD8', '\xDA', '\x5', '^', '\x30', '\x2', 
		'\xD9', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDE', 
		'\a', '?', '\x2', '\x2', '\xDC', '\xDF', '\x5', '\x32', '\x1A', '\x2', 
		'\xDD', '\xDF', '\a', '\x45', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE3', '\x5', 'V', ',', '\x2', '\xE1', 
		'\xE3', '\x5', 'X', '-', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', 
		'\x5', '\\', '/', '\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xE8', '\a', '\b', '\x2', '\x2', '\xE8', '\xE9', '\a', 
		'O', '\x2', '\x2', '\xE9', '\xEA', '\a', '\x19', '\x2', '\x2', '\xEA', 
		'\xEB', '\a', '\x6', '\x2', '\x2', '\xEB', '\xF0', '\a', 'O', '\x2', '\x2', 
		'\xEC', '\xED', '\a', '\x35', '\x2', '\x2', '\xED', '\xEF', '\a', 'O', 
		'\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF5', 
		'\a', '>', '\x2', '\x2', '\xF4', '\xF6', '\x5', '`', '\x31', '\x2', '\xF5', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\a', 
		'?', '\x2', '\x2', '\xF8', '\x10B', '\a', '\x45', '\x2', '\x2', '\xF9', 
		'\xFA', '\a', 'O', '\x2', '\x2', '\xFA', '\xFB', '\a', '\x19', '\x2', 
		'\x2', '\xFB', '\xFC', '\a', '\x6', '\x2', '\x2', '\xFC', '\x101', '\a', 
		'O', '\x2', '\x2', '\xFD', '\xFE', '\a', '\x35', '\x2', '\x2', '\xFE', 
		'\x100', '\a', 'O', '\x2', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x103', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x104', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x106', '\a', '>', '\x2', '\x2', '\x105', 
		'\x107', '\x5', '`', '\x31', '\x2', '\x106', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\a', '?', '\x2', '\x2', 
		'\x109', '\x10B', '\a', '\x45', '\x2', '\x2', '\x10A', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10F', '\x5', 'V', ',', 
		'\x2', '\x10D', '\x10F', '\x5', 'X', '-', '\x2', '\x10E', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x112', '\x5', '\\', '/', '\x2', '\x111', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\a', '\b', '\x2', 
		'\x2', '\x114', '\x11A', '\a', 'O', '\x2', '\x2', '\x115', '\x116', '\a', 
		'\x19', '\x2', '\x2', '\x116', '\x118', '\x5', '\x1C', '\xF', '\x2', '\x117', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11B', 
		'\a', '\x45', '\x2', '\x2', '\x11A', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x120', '\x5', '\f', '\a', '\x2', '\x11D', 
		'\x11F', '\x5', '\f', '\a', '\x2', '\x11E', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x122', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x19', '\x3', '\x2', '\x2', '\x2', '\x122', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x12C', '\x5', '\x1C', '\xF', '\x2', '\x124', 
		'\x12C', '\x5', '&', '\x14', '\x2', '\x125', '\x12C', '\x5', '(', '\x15', 
		'\x2', '\x126', '\x12C', '\x5', '*', '\x16', '\x2', '\x127', '\x12C', 
		'\x5', ',', '\x17', '\x2', '\x128', '\x12C', '\x5', '.', '\x18', '\x2', 
		'\x129', '\x12C', '\x5', '\x30', '\x19', '\x2', '\x12A', '\x12C', '\x5', 
		'\x32', '\x1A', '\x2', '\x12B', '\x123', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x126', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x12C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x12D', 
		'\x12E', '\x5', '\x34', '\x1B', '\x2', '\x12E', '\x12F', '\a', '\x45', 
		'\x2', '\x2', '\x12F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x130', '\x133', 
		'\a', 'O', '\x2', '\x2', '\x131', '\x132', '\a', '\x19', '\x2', '\x2', 
		'\x132', '\x134', '\x5', '\x34', '\x1B', '\x2', '\x133', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x134', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\a', '\b', '\x2', 
		'\x2', '\x136', '\x13B', '\x5', '\x1E', '\x10', '\x2', '\x137', '\x138', 
		'\a', '\x44', '\x2', '\x2', '\x138', '\x13A', '\x5', '\x1E', '\x10', '\x2', 
		'\x139', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x148', 
		'\x5', ' ', '\x11', '\x2', '\x13F', '\x144', '\x5', '\x34', '\x1B', '\x2', 
		'\x140', '\x141', '\a', '\x44', '\x2', '\x2', '\x141', '\x143', '\x5', 
		'\x34', '\x1B', '\x2', '\x142', '\x140', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x145', '\x3', '\x2', '\x2', '\x2', '\x145', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x147', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '#', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x14E', '\x5', '\x34', '\x1B', '\x2', '\x14A', '\x14B', '\a', '\x44', 
		'\x2', '\x2', '\x14B', '\x14D', '\x5', '\x34', '\x1B', '\x2', '\x14C', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\a', 
		'\v', '\x2', '\x2', '\x152', '\x154', '\a', '>', '\x2', '\x2', '\x153', 
		'\x155', '\x5', '\"', '\x12', '\x2', '\x154', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x154', '\x155', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '\x158', '\a', '\x45', '\x2', '\x2', 
		'\x157', '\x159', '\x5', '\x34', '\x1B', '\x2', '\x158', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15C', '\a', '\x45', '\x2', 
		'\x2', '\x15B', '\x15D', '\x5', '$', '\x13', '\x2', '\x15C', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x160', '\a', 
		'?', '\x2', '\x2', '\x15F', '\x161', '\x5', '\x1A', '\xE', '\x2', '\x160', 
		'\x15F', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\'', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\a', 
		'\x11', '\x2', '\x2', '\x163', '\x164', '\a', '>', '\x2', '\x2', '\x164', 
		'\x165', '\x5', '\x34', '\x1B', '\x2', '\x165', '\x166', '\a', '?', '\x2', 
		'\x2', '\x166', '\x169', '\x5', '\x1A', '\xE', '\x2', '\x167', '\x168', 
		'\a', '\x12', '\x2', '\x2', '\x168', '\x16A', '\x5', '\x1A', '\xE', '\x2', 
		'\x169', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', ')', '\x3', '\x2', '\x2', '\x2', '\x16B', 
		'\x16D', '\a', '\x13', '\x2', '\x2', '\x16C', '\x16E', '\x5', '\x34', 
		'\x1B', '\x2', '\x16D', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16D', 
		'\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x16F', '\x170', '\a', '\x45', '\x2', '\x2', '\x170', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x172', '\a', '\x14', '\x2', '\x2', '\x172', 
		'\x173', '\a', '\x45', '\x2', '\x2', '\x173', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x174', '\x175', '\a', '\x17', '\x2', '\x2', '\x175', '\x176', 
		'\a', '>', '\x2', '\x2', '\x176', '\x177', '\x5', '\x34', '\x1B', '\x2', 
		'\x177', '\x178', '\a', '?', '\x2', '\x2', '\x178', '\x179', '\x5', '\x32', 
		'\x1A', '\x2', '\x179', '/', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', 
		'\a', '\f', '\x2', '\x2', '\x17B', '\x17C', '\a', '>', '\x2', '\x2', '\x17C', 
		'\x17D', '\x5', '\x34', '\x1B', '\x2', '\x17D', '\x17E', '\a', '?', '\x2', 
		'\x2', '\x17E', '\x17F', '\x5', '\x32', '\x1A', '\x2', '\x17F', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x184', '\a', '@', '\x2', '\x2', 
		'\x181', '\x183', '\x5', '\f', '\a', '\x2', '\x182', '\x181', '\x3', '\x2', 
		'\x2', '\x2', '\x183', '\x186', '\x3', '\x2', '\x2', '\x2', '\x184', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x187', '\x3', '\x2', '\x2', '\x2', '\x186', '\x184', '\x3', 
		'\x2', '\x2', '\x2', '\x187', '\x188', '\a', '\x41', '\x2', '\x2', '\x188', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18C', '\x5', '\x36', '\x1C', 
		'\x2', '\x18A', '\x18C', '\x5', '\x38', '\x1D', '\x2', '\x18B', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x35', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x5', 
		'R', '*', '\x2', '\x18E', '\x18F', '\t', '\x2', '\x2', '\x2', '\x18F', 
		'\x190', '\x5', '\x36', '\x1C', '\x2', '\x190', '\x193', '\x3', '\x2', 
		'\x2', '\x2', '\x191', '\x193', '\x5', ':', '\x1E', '\x2', '\x192', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x37', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\x5', 
		'\x64', '\x33', '\x2', '\x195', '\x196', '\a', '\x38', '\x2', '\x2', '\x196', 
		'\x197', '\x5', '\x32', '\x1A', '\x2', '\x197', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x1A0', '\x5', '<', '\x1F', '\x2', '\x199', '\x19A', 
		'\a', '\x36', '\x2', '\x2', '\x19A', '\x19B', '\x5', '<', '\x1F', '\x2', 
		'\x19B', '\x19C', '\a', '\x37', '\x2', '\x2', '\x19C', '\x19D', '\x5', 
		'<', '\x1F', '\x2', '\x19D', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19E', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A2', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A8', '\x5', 
		'>', ' ', '\x2', '\x1A4', '\x1A5', '\a', '$', '\x2', '\x2', '\x1A5', '\x1A7', 
		'\x5', '>', ' ', '\x2', '\x1A6', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A9', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1A8', '\x3', '\x2', '\x2', 
		'\x2', '\x1AB', '\x1B0', '\x5', '@', '!', '\x2', '\x1AC', '\x1AD', '\a', 
		'%', '\x2', '\x2', '\x1AD', '\x1AF', '\x5', '@', '!', '\x2', '\x1AE', 
		'\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B2', '\x3', '\x2', '\x2', 
		'\x2', '\x1B0', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B8', '\x5', 
		'\x42', '\"', '\x2', '\x1B4', '\x1B5', '\a', '=', '\x2', '\x2', '\x1B5', 
		'\x1B7', '\x5', '\x42', '\"', '\x2', '\x1B6', '\x1B4', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1BB', '\x1C0', '\x5', '\x44', '#', '\x2', '\x1BC', 
		'\x1BD', '\a', '<', '\x2', '\x2', '\x1BD', '\x1BF', '\x5', '\x44', '#', 
		'\x2', '\x1BE', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1C8', '\x5', '\x46', '$', '\x2', '\x1C4', '\x1C5', '\a', ';', '\x2', 
		'\x2', '\x1C5', '\x1C7', '\x5', '\x46', '$', '\x2', '\x1C6', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1D0', '\x5', 'H', '%', 
		'\x2', '\x1CC', '\x1CD', '\t', '\x3', '\x2', '\x2', '\x1CD', '\x1CF', 
		'\x5', 'H', '%', '\x2', '\x1CE', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D0', '\x3', '\x2', '\x2', 
		'\x2', '\x1D3', '\x1D8', '\x5', 'J', '&', '\x2', '\x1D4', '\x1D5', '\t', 
		'\x4', '\x2', '\x2', '\x1D5', '\x1D7', '\x5', 'J', '&', '\x2', '\x1D6', 
		'\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x1DA', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1E0', '\x5', 
		'L', '\'', '\x2', '\x1DC', '\x1DD', '\t', '\x5', '\x2', '\x2', '\x1DD', 
		'\x1DF', '\x5', 'L', '\'', '\x2', '\x1DE', '\x1DC', '\x3', '\x2', '\x2', 
		'\x2', '\x1DF', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1DE', 
		'\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', 
		'\x1E1', 'K', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E0', '\x3', '\x2', 
		'\x2', '\x2', '\x1E3', '\x1E8', '\x5', 'N', '(', '\x2', '\x1E4', '\x1E5', 
		'\t', '\x6', '\x2', '\x2', '\x1E5', '\x1E7', '\x5', 'N', '(', '\x2', '\x1E6', 
		'\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1EA', '\x3', '\x2', '\x2', 
		'\x2', '\x1E8', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', '\x1E9', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1F0', '\x5', 
		'P', ')', '\x2', '\x1EC', '\x1ED', '\t', '\a', '\x2', '\x2', '\x1ED', 
		'\x1EF', '\x5', 'P', ')', '\x2', '\x1EE', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1EF', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1EE', 
		'\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\x3', '\x2', '\x2', '\x2', 
		'\x1F1', 'O', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F0', '\x3', '\x2', 
		'\x2', '\x2', '\x1F3', '\x1F4', '\b', ')', '\x1', '\x2', '\x1F4', '\x1F5', 
		'\t', '\b', '\x2', '\x2', '\x1F5', '\x1F8', '\x5', 'P', ')', '\x5', '\x1F6', 
		'\x1F8', '\x5', 'R', '*', '\x2', '\x1F7', '\x1F3', '\x3', '\x2', '\x2', 
		'\x2', '\x1F7', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1FD', 
		'\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\f', '\x3', '\x2', '\x2', 
		'\x1FA', '\x1FC', '\t', '\t', '\x2', '\x2', '\x1FB', '\x1F9', '\x3', '\x2', 
		'\x2', '\x2', '\x1FC', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\x3', '\x2', '\x2', '\x2', 
		'\x1FE', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FD', '\x3', '\x2', 
		'\x2', '\x2', '\x200', '\x207', '\x5', 'T', '+', '\x2', '\x201', '\x206', 
		'\x5', '\x64', '\x33', '\x2', '\x202', '\x203', '\a', '\x35', '\x2', '\x2', 
		'\x203', '\x206', '\a', 'O', '\x2', '\x2', '\x204', '\x206', '\x5', '\x66', 
		'\x34', '\x2', '\x205', '\x201', '\x3', '\x2', '\x2', '\x2', '\x205', 
		'\x202', '\x3', '\x2', '\x2', '\x2', '\x205', '\x204', '\x3', '\x2', '\x2', 
		'\x2', '\x206', '\x209', '\x3', '\x2', '\x2', '\x2', '\x207', '\x205', 
		'\x3', '\x2', '\x2', '\x2', '\x207', '\x208', '\x3', '\x2', '\x2', '\x2', 
		'\x208', 'S', '\x3', '\x2', '\x2', '\x2', '\x209', '\x207', '\x3', '\x2', 
		'\x2', '\x2', '\x20A', '\x218', '\a', 'G', '\x2', '\x2', '\x20B', '\x218', 
		'\a', '\x15', '\x2', '\x2', '\x20C', '\x218', '\a', '\x16', '\x2', '\x2', 
		'\x20D', '\x218', '\a', 'J', '\x2', '\x2', '\x20E', '\x218', '\a', 'K', 
		'\x2', '\x2', '\x20F', '\x210', '\a', '>', '\x2', '\x2', '\x210', '\x211', 
		'\x5', '\x34', '\x1B', '\x2', '\x211', '\x212', '\a', '?', '\x2', '\x2', 
		'\x212', '\x218', '\x3', '\x2', '\x2', '\x2', '\x213', '\x218', '\a', 
		'O', '\x2', '\x2', '\x214', '\x218', '\a', 'L', '\x2', '\x2', '\x215', 
		'\x218', '\a', 'L', '\x2', '\x2', '\x216', '\x218', '\x5', 'n', '\x38', 
		'\x2', '\x217', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x217', '\x20B', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x217', '\x20E', '\x3', 
		'\x2', '\x2', '\x2', '\x217', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x217', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x217', '\x214', '\x3', '\x2', '\x2', 
		'\x2', '\x217', '\x215', '\x3', '\x2', '\x2', '\x2', '\x217', '\x216', 
		'\x3', '\x2', '\x2', '\x2', '\x218', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x219', '\x21A', '\a', '\x10', '\x2', '\x2', '\x21A', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x21B', '\x21C', '\a', '\xF', '\x2', '\x2', '\x21C', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\a', '\xE', '\x2', '\x2', 
		'\x21E', '[', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\a', '\r', 
		'\x2', '\x2', '\x220', ']', '\x3', '\x2', '\x2', '\x2', '\x221', '\x226', 
		'\x5', 'l', '\x37', '\x2', '\x222', '\x223', '\a', '\x44', '\x2', '\x2', 
		'\x223', '\x225', '\x5', 'l', '\x37', '\x2', '\x224', '\x222', '\x3', 
		'\x2', '\x2', '\x2', '\x225', '\x228', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\x224', '\x3', '\x2', '\x2', '\x2', '\x226', '\x227', '\x3', '\x2', '\x2', 
		'\x2', '\x227', '_', '\x3', '\x2', '\x2', '\x2', '\x228', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x229', '\x22E', '\x5', 'j', '\x36', '\x2', '\x22A', 
		'\x22B', '\a', '\x44', '\x2', '\x2', '\x22B', '\x22D', '\x5', 'j', '\x36', 
		'\x2', '\x22C', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x230', 
		'\x3', '\x2', '\x2', '\x2', '\x22E', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'\x22E', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x230', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x231', 
		'\x236', '\a', 'O', '\x2', '\x2', '\x232', '\x233', '\a', '\x44', '\x2', 
		'\x2', '\x233', '\x235', '\a', 'O', '\x2', '\x2', '\x234', '\x232', '\x3', 
		'\x2', '\x2', '\x2', '\x235', '\x238', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x234', '\x3', '\x2', '\x2', '\x2', '\x236', '\x237', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x63', '\x3', '\x2', '\x2', '\x2', '\x238', '\x236', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23B', '\a', '>', '\x2', '\x2', 
		'\x23A', '\x23C', '\x5', '`', '\x31', '\x2', '\x23B', '\x23A', '\x3', 
		'\x2', '\x2', '\x2', '\x23B', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x23D', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\a', '?', '\x2', 
		'\x2', '\x23E', '\x65', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', 
		'\a', '\x42', '\x2', '\x2', '\x240', '\x241', '\x5', 'h', '\x35', '\x2', 
		'\x241', '\x242', '\a', '\x43', '\x2', '\x2', '\x242', '\x244', '\x3', 
		'\x2', '\x2', '\x2', '\x243', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x245', '\x3', '\x2', '\x2', '\x2', '\x245', '\x243', '\x3', '\x2', '\x2', 
		'\x2', '\x245', '\x246', '\x3', '\x2', '\x2', '\x2', '\x246', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x247', '\x24B', '\a', 'J', '\x2', '\x2', '\x248', 
		'\x24B', '\a', 'L', '\x2', '\x2', '\x249', '\x24B', '\x5', 'R', '*', '\x2', 
		'\x24A', '\x247', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x248', '\x3', 
		'\x2', '\x2', '\x2', '\x24A', '\x249', '\x3', '\x2', '\x2', '\x2', '\x24B', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24E', '\a', '\x38', '\x2', 
		'\x2', '\x24D', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', 
		'\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\x3', '\x2', '\x2', '\x2', 
		'\x24F', '\x250', '\x5', '\x34', '\x1B', '\x2', '\x250', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x251', '\x252', '\a', 'O', '\x2', '\x2', '\x252', 'm', 
		'\x3', '\x2', '\x2', '\x2', '\x253', '\x257', '\a', 'T', '\x2', '\x2', 
		'\x254', '\x256', '\x5', 'p', '\x39', '\x2', '\x255', '\x254', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x259', '\x3', '\x2', '\x2', '\x2', '\x257', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\x3', '\x2', '\x2', 
		'\x2', '\x258', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x259', '\x257', 
		'\x3', '\x2', '\x2', '\x2', '\x25A', '\x25B', '\a', 'S', '\x2', '\x2', 
		'\x25B', 'o', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x263', '\a', 'W', 
		'\x2', '\x2', '\x25D', '\x263', '\a', 'Y', '\x2', '\x2', '\x25E', '\x25F', 
		'\a', 'U', '\x2', '\x2', '\x25F', '\x260', '\x5', '\x34', '\x1B', '\x2', 
		'\x260', '\x261', '\a', 'V', '\x2', '\x2', '\x261', '\x263', '\x3', '\x2', 
		'\x2', '\x2', '\x262', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x262', '\x25D', 
		'\x3', '\x2', '\x2', '\x2', '\x262', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x263', 'q', '\x3', '\x2', '\x2', '\x2', 'H', 'u', '{', '}', '\x83', 
		'\x8E', '\x99', '\xA4', '\xAF', '\xB3', '\xB7', '\xBD', '\xC1', '\xC5', 
		'\xCB', '\xCF', '\xD3', '\xD9', '\xDE', '\xE2', '\xE5', '\xF0', '\xF5', 
		'\x101', '\x106', '\x10A', '\x10E', '\x111', '\x117', '\x11A', '\x120', 
		'\x12B', '\x133', '\x13B', '\x144', '\x147', '\x14E', '\x154', '\x158', 
		'\x15C', '\x160', '\x169', '\x16D', '\x184', '\x18B', '\x192', '\x1A0', 
		'\x1A8', '\x1B0', '\x1B8', '\x1C0', '\x1C8', '\x1D0', '\x1D8', '\x1E0', 
		'\x1E8', '\x1F0', '\x1F7', '\x1FD', '\x205', '\x207', '\x217', '\x226', 
		'\x22E', '\x236', '\x23B', '\x245', '\x24A', '\x24D', '\x257', '\x262',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrBiteParser
