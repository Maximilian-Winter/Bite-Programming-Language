module MainModule;

import System;
using System;

import CSharpSystem;
using CSharpSystem;


function FindFibonacciNumber(n)
{
    var count= 2;
    var a = 1;
    var b = 1;
    var c = 1;
    if(n == 0)
    {
        return 0;
    }
    while(count<n)
    {
        c = a + b;
        a = b;
        b = c; 
        count++;
    }

    return c;
}

var temp = 0;
var count3 = 0;
while(count3 < 1)
{
    var count2 = 0;
    while(count2 < 1)
    {
        temp = FindFibonacciNumber(5);
        count2++;
    }
    count3++;
}
Console.WriteLine(temp);

/*
function Slow(n)
{
    var fib = FindFibonacciNumber(n);

    return fib;
}

function FindFibonacciNumber(n)
{
    var count= 2;
    var a = 1;
    var b = 1;
    var c = 1;
    if(n == 0)
    {
        return 0;
    }
    while(count<n)
    {
        c = a + b;
        a = b;
        b = c; 
        count++;
    }
   
    return c;
}

var temp = 0;
var count2 = 0;
while(count2 < 1000)
{
    var count3 = 0;
    while(count3<37)
    {
        temp = Slow(count3);
        count3++;
    }
    count2++;
}

function Slow(n)
{
    var nthPrime = FindPrimeNumber(n);

    return nthPrime;
}

function FindPrimeNumber(n)
{
    var count=0;
    var a = 2;
    while(count<n)
    {
        var b = 2;
        var prime = 1;
        while(b * b <= a )
        {
            if(a % b == 0)
            {
                Console.WriteLine("prime = 0");
                prime = 0;
            }
            b++;
        }
        if(prime > 0)
        {
            Console.WriteLine("count++");
            count++;
        }
        Console.WriteLine("a++");
        a++;
    }
    return (--a);
}

function Slow(n)
{
    var nthPrime = FindPrimeNumber(n);

    return nthPrime;
}

function FindPrimeNumber(n)
{
    var count=0;
    var a = 2;
    while(count<n)
    {
        var b = 2;
        var prime = 1;
        while(b * b <= a )
        {
            if(a % b == 0)
            {
                prime = 0;
            }
            b++;
        }
        if(prime > 0)
        {
            count++;
        }
        a++;
    }
    return (--a);
}

function Slow(n)
{
    var nthPrime = FindPrimeNumber(n);

    return nthPrime;
}

function FindPrimeNumber(n)
{
    var count=0;
    var a = 2;
    while(count<n)
    {
        var b = 2;
        var prime = 1;
        while(b * b <= a )
        {
            if(a % b == 0)
            {
                prime = 0;
            }
            b++;
        }
        if(prime > 0)
        {
            count++;
        }
        a++;
    }
    return (--a);
}




var a = 0;
while(a < 1000)
{
    Print(a++);
}

Print(TestFunction(1000));
function TestFunction(n)
{
    return n + 1;
}

Print(TestFunction(0));
Print(TestFunction(1));
Print(TestFunction(2));

import CSharpSystem;
using CSharpSystem;

function TestFunction(n)
{
    return n + 1;
}

Print(TestFunction(0));
Print(TestFunction(1));
Print(TestFunction(2));


function TestFunction(n)
{
    var t = n + 1;

    return t;
}

Print(TestFunction(0));


if(!true)
{
    Console.WriteLine("1");
}
else if(true)
{
    Console.WriteLine("2");
}
else if(!true || false)
{
    Console.WriteLine("3");
}
else
{
    Console.WriteLine("4");
}

if(!true)
{
    Console.WriteLine("1");
}
else if(false)
{
    Console.WriteLine("2");
}
else if(!true || true)
{
    Console.WriteLine("3");
}
else
{
    Console.WriteLine("4");
}

if(!true)
{
    Console.WriteLine("1");
}
else if(false)
{
    Console.WriteLine("2");
}
else if(!true || false)
{
    Console.WriteLine("3");
}
else
{
    Console.WriteLine("4");
}


class FooA
{
    var e = 30;
}

var g = 5;
var test2 = new FooA();
Console.WriteLine(g);
Console.WriteLine(test2.e);


var c = new Object();
var f = 0;
for(var x = 0; x < 10; x++)
{
    for(var y = 0; y < 10; y++)
    {
        for(var z = 0; z < 10; z++)
        {
           c[x][y][z] = "Number: " + f;
           f++;
        }
    }
}
Console.WriteLine(g);

for(var x = 0; x < 10; x++)
{
    for(var y = 0; y < 10; y++)
    {
        for(var z = 0; z < 10; z++)
        {
           Console.WriteLine(c[x][y][z]);
        }
    }
}
*/
